module Partas.AnimeJs.CE

open Fable.Core
open Fable.Core.JsInterop

type ICssStyle = interface end
[<Erase; Interface>]
type CssStyle =
    /// <summary>
    /// The<b><c>accent-color</c></b> CSS property sets the accent color for user-interface controls generated by some elements.<br/><br/>
    ///<b>Syntax</b>: <c>auto | color</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline accentColor: ICssStyle = unbox "accentColor"
    /// <summary>
    /// The CSS<b><c>align-content</c></b> property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.<br/><br/>
    ///<b>Syntax</b>: <c>normal | baseline-position | content-distribution | overflow-position? content-position</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline alignContent: ICssStyle = unbox "alignContent"
    /// <summary>
    /// The CSS<b><c>align-items</c></b> property sets the <c>align-self</c> value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.<br/><br/>
    ///<b>Syntax</b>: <c>normal | stretch | baseline-position | [ overflow-position? self-position ]</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline alignItems: ICssStyle = unbox "alignItems"
    /// <summary>
    /// The<b><c>align-self</c></b> CSS property overrides a grid or flex item's <c>align-items</c> value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.<br/><br/>
    ///<b>Syntax</b>: <c>auto | normal | stretch | baseline-position | overflow-position? self-position</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline alignSelf: ICssStyle = unbox "alignSelf"
    /// <summary>
    /// The<b><c>align-tracks</c></b> CSS property sets the alignment in the masonry axis for grid containers that have masonry in their block axis.<br/><br/>
    ///<b>Syntax</b>: <c>[ normal | baseline-position | content-distribution | overflow-position? content-position ]#</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline alignTracks: ICssStyle = unbox "alignTracks"
    /// <summary>
    /// The<b><c>animation-composition</c></b> CSS property specifies the composite operation to use when multiple animations affect the same property simultaneously.<br/><br/>
    ///<b>Syntax</b>: <c>single-animation-composition#</c>
    /// <br/><b>Initial value</b>: <c>replace</c>
    /// </summary>
    static member inline animationComposition: ICssStyle = unbox "animationComposition"
    /// <summary>
    /// The<b><c>animation-delay</c></b> CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.<br/><br/>
    ///<b>Syntax</b>: <c>time#</c>
    /// <br/><b>Initial value</b>: <c>0s</c>
    /// </summary>
    static member inline animationDelay: ICssStyle = unbox "animationDelay"
    /// <summary>
    /// The<b><c>animation-direction</c></b> CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.<br/><br/>
    ///<b>Syntax</b>: <c>single-animation-direction#</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline animationDirection: ICssStyle = unbox "animationDirection"
    /// <summary>
    /// The<b><c>animation-duration</c></b> CSS property sets the length of time that an animation takes to complete one cycle.<br/><br/>
    ///<b>Syntax</b>: <c>time#</c>
    /// <br/><b>Initial value</b>: <c>0s</c>
    /// </summary>
    static member inline animationDuration: ICssStyle = unbox "animationDuration"
    /// <summary>
    /// The<b><c>animation-fill-mode</c></b> CSS property sets how a CSS animation applies styles to its target before and after its execution.<br/><br/>
    ///<b>Syntax</b>: <c>single-animation-fill-mode#</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline animationFillMode: ICssStyle = unbox "animationFillMode"
    /// <summary>
    /// The<b><c>animation-iteration-count</c></b> CSS property sets the number of times an animation sequence should be played before stopping.<br/><br/>
    ///<b>Syntax</b>: <c>single-animation-iteration-count#</c>
    /// <br/><b>Initial value</b>: <c>1</c>
    /// </summary>
    static member inline animationIterationCount: ICssStyle = unbox "animationIterationCount"
    /// <summary>
    /// The<b><c>animation-name</c></b> CSS property specifies the names of one or more <c>@keyframes</c> at-rules that describe the animation to apply to an element. Multiple <c>@keyframe</c> at-rules are specified as a comma-separated list of names. If the specified name does not match any <c>@keyframe</c> at-rule, no properties are animated.<br/><br/>
    ///<b>Syntax</b>: <c>[ none | keyframes-name ]#</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline animationName: ICssStyle = unbox "animationName"
    /// <summary>
    /// The<b><c>animation-play-state</c></b> CSS property sets whether an animation is running or paused.<br/><br/>
    ///<b>Syntax</b>: <c>single-animation-play-state#</c>
    /// <br/><b>Initial value</b>: <c>running</c>
    /// </summary>
    static member inline animationPlayState: ICssStyle = unbox "animationPlayState"
    /// <summary>
    /// The<b><c>animation-range-end</c></b> CSS property is used to set the end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will end.<br/><br/>
    ///<b>Syntax</b>: <c>[ normal | length-percentage | timeline-range-name length-percentage? ]#</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline animationRangeEnd: ICssStyle = unbox "animationRangeEnd"
    /// <summary>
    /// The<b><c>animation-range-start</c></b> CSS property is used to set the start of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start.<br/><br/>
    ///<b>Syntax</b>: <c>[ normal | length-percentage | timeline-range-name length-percentage? ]#</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline animationRangeStart: ICssStyle = unbox "animationRangeStart"
    /// <summary>
    /// The<b><c>animation-timeline</c></b> CSS property specifies the timeline that is used to control the progress of an animation.<br/><br/>
    ///<b>Syntax</b>: <c>single-animation-timeline#</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline animationTimeline: ICssStyle = unbox "animationTimeline"
    /// <summary>
    /// The<b><c>animation-timing-function</c></b> CSS property sets how an animation progresses through the duration of each cycle.<br/><br/>
    ///<b>Syntax</b>: <c>easing-function#</c>
    /// <br/><b>Initial value</b>: <c>ease</c>
    /// </summary>
    static member inline animationTimingFunction: ICssStyle = unbox "animationTimingFunction"
    /// <summary>
    /// The<b><c>appearance</c></b> CSS property is used to control native appearance of UI controls, that are based on operating system's theme.<br/><br/>
    ///<b>Syntax</b>: <c>none | auto | textfield | menulist-button | compat-auto</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline appearance: ICssStyle = unbox "appearance"
    /// <summary>
    /// The<b><c>aspect-ratio</c></b> CSS property sets a<b>preferred aspect ratio</b> for the box, which will be used in the calculation of auto sizes and some other layout functions.<br/><br/>
    ///<b>Syntax</b>: <c>auto | ratio</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline aspectRatio: ICssStyle = unbox "aspectRatio"
    /// <summary>
    /// The<b><c>backdrop-filter</c></b> CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.<br/><br/>
    ///<b>Syntax</b>: <c>none | filter-function-list</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline backdropFilter: ICssStyle = unbox "backdropFilter"
    /// <summary>
    /// The<b><c>backface-visibility</c></b> CSS property sets whether the back face of an element is visible when turned towards the user.<br/><br/>
    ///<b>Syntax</b>: <c>visible | hidden</c>
    /// <br/><b>Initial value</b>: <c>visible</c>
    /// </summary>
    static member inline backfaceVisibility: ICssStyle = unbox "backfaceVisibility"
    /// <summary>
    /// The<b><c>background-attachment</c></b> CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.<br/><br/>
    ///<b>Syntax</b>: <c>attachment#</c>
    /// <br/><b>Initial value</b>: <c>scroll</c>
    /// </summary>
    static member inline backgroundAttachment: ICssStyle = unbox "backgroundAttachment"
    /// <summary>
    /// The<b><c>background-blend-mode</c></b> CSS property sets how an element's background images should blend with each other and with the element's background color.<br/><br/>
    ///<b>Syntax</b>: <c>blend-mode#</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline backgroundBlendMode: ICssStyle = unbox "backgroundBlendMode"
    /// <summary>
    /// The<b><c>background-clip</c></b> CSS property sets whether an element's background extends underneath its border box, padding box, or content box.<br/><br/>
    ///<b>Syntax</b>: <c>box#</c>
    /// <br/><b>Initial value</b>: <c>border-box</c>
    /// </summary>
    static member inline backgroundClip: ICssStyle = unbox "backgroundClip"
    /// <summary>
    /// The<b><c>background-color</c></b> CSS property sets the background color of an element.<br/><br/>
    ///<b>Syntax</b>: <c>color</c>
    /// <br/><b>Initial value</b>: <c>transparent</c>
    /// </summary>
    static member inline backgroundColor: ICssStyle = unbox "backgroundColor"
    /// <summary>
    /// The<b><c>background-image</c></b> CSS property sets one or more background images on an element.<br/><br/>
    ///<b>Syntax</b>: <c>bg-image#</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline backgroundImage: ICssStyle = unbox "backgroundImage"
    /// <summary>
    /// The<b><c>background-origin</c></b> CSS property sets the background's origin: from the border start, inside the border, or inside the padding.<br/><br/>
    ///<b>Syntax</b>: <c>box#</c>
    /// <br/><b>Initial value</b>: <c>padding-box</c>
    /// </summary>
    static member inline backgroundOrigin: ICssStyle = unbox "backgroundOrigin"
    /// <summary>
    /// The<b><c>background-position-x</c></b> CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by <c>background-origin</c>.<br/><br/>
    ///<b>Syntax</b>: <c>[ center | [ [ left | right | x-start | x-end ]? length-percentage? ]! ]#</c>
    /// <br/><b>Initial value</b>: <c>0%</c>
    /// </summary>
    static member inline backgroundPositionX: ICssStyle = unbox "backgroundPositionX"
    /// <summary>
    /// The<b><c>background-position-y</c></b> CSS property sets the initial vertical position for each background image. The position is relative to the position layer set by <c>background-origin</c>.<br/><br/>
    ///<b>Syntax</b>: <c>[ center | [ [ top | bottom | y-start | y-end ]? length-percentage? ]! ]#</c>
    /// <br/><b>Initial value</b>: <c>0%</c>
    /// </summary>
    static member inline backgroundPositionY: ICssStyle = unbox "backgroundPositionY"
    /// <summary>
    /// The<b><c>background-repeat</c></b> CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.<br/><br/>
    ///<b>Syntax</b>: <c>repeat-style#</c>
    /// <br/><b>Initial value</b>: <c>repeat</c>
    /// </summary>
    static member inline backgroundRepeat: ICssStyle = unbox "backgroundRepeat"
    /// <summary>
    /// The<b><c>background-size</c></b> CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.<br/><br/>
    ///<b>Syntax</b>: <c>bg-size#</c>
    /// <br/><b>Initial value</b>: <c>auto auto</c>
    /// </summary>
    static member inline backgroundSize: ICssStyle = unbox "backgroundSize"
    /// </summary>
    static member inline blockOverflow: ICssStyle = unbox "blockOverflow"
    /// <summary>
    /// The<b><c>block-size</c></b> CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the <c>width</c> or the <c>height</c> property, depending on the value of <c>writing-mode</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'width'</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline blockSize: ICssStyle = unbox "blockSize"
    /// <summary>
    /// The<b><c>border-block-color</c></b> CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>border-top-color</c> and <c>border-bottom-color</c>, or <c>border-right-color</c> and <c>border-left-color</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-color'{1,2}</c>
    /// <br/><b>Initial value</b>: <c>currentcolor</c>
    /// </summary>
    static member inline borderBlockColor: ICssStyle = unbox "borderBlockColor"
    /// <summary>
    /// The<b><c>border-block-end-color</c></b> CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>border-top-color</c>, <c>border-right-color</c>, <c>border-bottom-color</c>, or <c>border-left-color</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-color'</c>
    /// <br/><b>Initial value</b>: <c>currentcolor</c>
    /// </summary>
    static member inline borderBlockEndColor: ICssStyle = unbox "borderBlockEndColor"
    /// <summary>
    /// The<b><c>border-block-end-style</c></b> CSS property defines the style of the logical block-end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>border-top-style</c>, <c>border-right-style</c>, <c>border-bottom-style</c>, or <c>border-left-style</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-style'</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline borderBlockEndStyle: ICssStyle = unbox "borderBlockEndStyle"
    /// <summary>
    /// The<b><c>border-block-end-width</c></b> CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>border-top-width</c>, <c>border-right-width</c>, <c>border-bottom-width</c>, or <c>border-left-width</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-width'</c>
    /// <br/><b>Initial value</b>: <c>medium</c>
    /// </summary>
    static member inline borderBlockEndWidth: ICssStyle = unbox "borderBlockEndWidth"
    /// <summary>
    /// The<b><c>border-block-start-color</c></b> CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>border-top-color</c>, <c>border-right-color</c>, <c>border-bottom-color</c>, or <c>border-left-color</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-color'</c>
    /// <br/><b>Initial value</b>: <c>currentcolor</c>
    /// </summary>
    static member inline borderBlockStartColor: ICssStyle = unbox "borderBlockStartColor"
    /// <summary>
    /// The<b><c>border-block-start-style</c></b> CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>border-top-style</c>, <c>border-right-style</c>, <c>border-bottom-style</c>, or <c>border-left-style</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-style'</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline borderBlockStartStyle: ICssStyle = unbox "borderBlockStartStyle"
    /// <summary>
    /// The<b><c>border-block-start-width</c></b> CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>border-top-width</c>, <c>border-right-width</c>, <c>border-bottom-width</c>, or <c>border-left-width</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-width'</c>
    /// <br/><b>Initial value</b>: <c>medium</c>
    /// </summary>
    static member inline borderBlockStartWidth: ICssStyle = unbox "borderBlockStartWidth"
    /// <summary>
    /// The<b><c>border-block-style</c></b> CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>border-top-style</c> and <c>border-bottom-style</c>, or <c>border-left-style</c> and <c>border-right-style</c> properties depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-style'</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline borderBlockStyle: ICssStyle = unbox "borderBlockStyle"
    /// <summary>
    /// The<b><c>border-block-width</c></b> CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>border-top-width</c> and <c>border-bottom-width</c>, or <c>border-left-width</c>, and <c>border-right-width</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-width'</c>
    /// <br/><b>Initial value</b>: <c>medium</c>
    /// </summary>
    static member inline borderBlockWidth: ICssStyle = unbox "borderBlockWidth"
    /// <summary>
    /// The<b><c>border-bottom-color</c></b> CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties <c>border-color</c> or <c>border-bottom</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-color'</c>
    /// <br/><b>Initial value</b>: <c>currentcolor</c>
    /// </summary>
    static member inline borderBottomColor: ICssStyle = unbox "borderBottomColor"
    /// <summary>
    /// The<b><c>border-bottom-left-radius</c></b> CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.<br/><br/>
    ///<b>Syntax</b>: <c>length-percentage{1,2}</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline borderBottomLeftRadius: ICssStyle = unbox "borderBottomLeftRadius"
    /// <summary>
    /// The<b><c>border-bottom-right-radius</c></b> CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.<br/><br/>
    ///<b>Syntax</b>: <c>length-percentage{1,2}</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline borderBottomRightRadius: ICssStyle = unbox "borderBottomRightRadius"
    /// <summary>
    /// The<b><c>border-bottom-style</c></b> CSS property sets the line style of an element's bottom <c>border</c>.<br/><br/>
    ///<b>Syntax</b>: <c>line-style</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline borderBottomStyle: ICssStyle = unbox "borderBottomStyle"
    /// <summary>
    /// The<b><c>border-bottom-width</c></b> CSS property sets the width of the bottom border of an element.<br/><br/>
    ///<b>Syntax</b>: <c>line-width</c>
    /// <br/><b>Initial value</b>: <c>medium</c>
    /// </summary>
    static member inline borderBottomWidth: ICssStyle = unbox "borderBottomWidth"
    /// <summary>
    /// The<b><c>border-collapse</c></b> CSS property sets whether cells inside a <c>table</c> have shared or separate borders.<br/><br/>
    ///<b>Syntax</b>: <c>collapse | separate</c>
    /// <br/><b>Initial value</b>: <c>separate</c>
    /// </summary>
    static member inline borderCollapse: ICssStyle = unbox "borderCollapse"
    /// <summary>
    /// The<b><c>border-end-end-radius</c></b> CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>. This is useful when building styles to work regardless of the text orientation and writing mode.<br/><br/>
    ///<b>Syntax</b>: <c>length-percentage{1,2}</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline borderEndEndRadius: ICssStyle = unbox "borderEndEndRadius"
    /// <summary>
    /// The<b><c>border-end-start-radius</c></b> CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>. This is useful when building styles to work regardless of the text orientation and writing mode.<br/><br/>
    ///<b>Syntax</b>: <c>length-percentage{1,2}</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline borderEndStartRadius: ICssStyle = unbox "borderEndStartRadius"
    /// <summary>
    /// The<b><c>border-image-outset</c></b> CSS property sets the distance by which an element's border image is set out from its border box.<br/><br/>
    ///<b>Syntax</b>: <c>[ length | number ]{1,4}</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline borderImageOutset: ICssStyle = unbox "borderImageOutset"
    /// <summary>
    /// The<b><c>border-image-repeat</c></b> CSS property defines how the edge regions and middle region of a source image are adjusted to fit the dimensions of an element's border image. The middle region can be displayed by using the keyword "fill" in the border-image-slice property.<br/><br/>
    ///<b>Syntax</b>: <c>[ stretch | repeat | round | space ]{1,2}</c>
    /// <br/><b>Initial value</b>: <c>stretch</c>
    /// </summary>
    static member inline borderImageRepeat: ICssStyle = unbox "borderImageRepeat"
    /// <summary>
    /// The<b><c>border-image-slice</c></b> CSS property divides the image specified by <c>border-image-source</c> into regions. These regions form the components of an element's border image.<br/><br/>
    ///<b>Syntax</b>: <c>number-percentage{1,4} && fill?</c>
    /// <br/><b>Initial value</b>: <c>100%</c>
    /// </summary>
    static member inline borderImageSlice: ICssStyle = unbox "borderImageSlice"
    /// <summary>
    /// The<b><c>border-image-source</c></b> CSS property sets the source image used to create an element's border image.<br/><br/>
    ///<b>Syntax</b>: <c>none | image</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline borderImageSource: ICssStyle = unbox "borderImageSource"
    /// <summary>
    /// The<b><c>border-image-width</c></b> CSS property sets the width of an element's border image.<br/><br/>
    ///<b>Syntax</b>: <c>[ length-percentage | number | auto ]{1,4}</c>
    /// <br/><b>Initial value</b>: <c>1</c>
    /// </summary>
    static member inline borderImageWidth: ICssStyle = unbox "borderImageWidth"
    /// <summary>
    /// The<b><c>border-inline-color</c></b> CSS property defines the color of the logical borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>border-top-color</c> and <c>border-bottom-color</c>, or <c>border-right-color</c> and <c>border-left-color</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-color'{1,2}</c>
    /// <br/><b>Initial value</b>: <c>currentcolor</c>
    /// </summary>
    static member inline borderInlineColor: ICssStyle = unbox "borderInlineColor"
    /// <summary>
    /// The<b><c>border-inline-end-color</c></b> CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>border-top-color</c>, <c>border-right-color</c>, <c>border-bottom-color</c>, or <c>border-left-color</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-color'</c>
    /// <br/><b>Initial value</b>: <c>currentcolor</c>
    /// </summary>
    static member inline borderInlineEndColor: ICssStyle = unbox "borderInlineEndColor"
    /// <summary>
    /// The<b><c>border-inline-end-style</c></b> CSS property defines the style of the logical end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>border-top-style</c>, <c>border-right-style</c>, <c>border-bottom-style</c>, or <c>border-left-style</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-style'</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline borderInlineEndStyle: ICssStyle = unbox "borderInlineEndStyle"
    /// <summary>
    /// The<b><c>border-inline-end-width</c></b> CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>border-top-width</c>, <c>border-right-width</c>, <c>border-bottom-width</c>, or <c>border-left-width</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-width'</c>
    /// <br/><b>Initial value</b>: <c>medium</c>
    /// </summary>
    static member inline borderInlineEndWidth: ICssStyle = unbox "borderInlineEndWidth"
    /// <summary>
    /// The<b><c>border-inline-start-color</c></b> CSS property defines the color of the logical start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>border-top-color</c>, <c>border-right-color</c>, <c>border-bottom-color</c>, or <c>border-left-color</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-color'</c>
    /// <br/><b>Initial value</b>: <c>currentcolor</c>
    /// </summary>
    static member inline borderInlineStartColor: ICssStyle = unbox "borderInlineStartColor"
    /// <summary>
    /// The<b><c>border-inline-start-style</c></b> CSS property defines the style of the logical start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>border-top-style</c>, <c>border-right-style</c>, <c>border-bottom-style</c>, or <c>border-left-style</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-style'</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline borderInlineStartStyle: ICssStyle = unbox "borderInlineStartStyle"
    /// <summary>
    /// The<b><c>border-inline-start-width</c></b> CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>border-top-width</c>, <c>border-right-width</c>, <c>border-bottom-width</c>, or <c>border-left-width</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-width'</c>
    /// <br/><b>Initial value</b>: <c>medium</c>
    /// </summary>
    static member inline borderInlineStartWidth: ICssStyle = unbox "borderInlineStartWidth"
    /// <summary>
    /// The<b><c>border-inline-style</c></b> CSS property defines the style of the logical borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>border-top-style</c> and <c>border-bottom-style</c>, or <c>border-left-style</c> and <c>border-right-style</c> properties depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-style'</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline borderInlineStyle: ICssStyle = unbox "borderInlineStyle"
    /// <summary>
    /// The<b><c>border-inline-width</c></b> CSS property defines the width of the logical borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>border-top-width</c> and <c>border-bottom-width</c>, or <c>border-left-width</c>, and <c>border-right-width</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-width'</c>
    /// <br/><b>Initial value</b>: <c>medium</c>
    /// </summary>
    static member inline borderInlineWidth: ICssStyle = unbox "borderInlineWidth"
    /// <summary>
    /// The<b><c>border-left-color</c></b> CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties <c>border-color</c> or <c>border-left</c>.<br/><br/>
    ///<b>Syntax</b>: <c>color</c>
    /// <br/><b>Initial value</b>: <c>currentcolor</c>
    /// </summary>
    static member inline borderLeftColor: ICssStyle = unbox "borderLeftColor"
    /// <summary>
    /// The<b><c>border-left-style</c></b> CSS property sets the line style of an element's left <c>border</c>.<br/><br/>
    ///<b>Syntax</b>: <c>line-style</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline borderLeftStyle: ICssStyle = unbox "borderLeftStyle"
    /// <summary>
    /// The<b><c>border-left-width</c></b> CSS property sets the width of the left border of an element.<br/><br/>
    ///<b>Syntax</b>: <c>line-width</c>
    /// <br/><b>Initial value</b>: <c>medium</c>
    /// </summary>
    static member inline borderLeftWidth: ICssStyle = unbox "borderLeftWidth"
    /// <summary>
    /// The<b><c>border-right-color</c></b> CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties <c>border-color</c> or <c>border-right</c>.<br/><br/>
    ///<b>Syntax</b>: <c>color</c>
    /// <br/><b>Initial value</b>: <c>currentcolor</c>
    /// </summary>
    static member inline borderRightColor: ICssStyle = unbox "borderRightColor"
    /// <summary>
    /// The<b><c>border-right-style</c></b> CSS property sets the line style of an element's right <c>border</c>.<br/><br/>
    ///<b>Syntax</b>: <c>line-style</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline borderRightStyle: ICssStyle = unbox "borderRightStyle"
    static member inline borderWidth: ICssStyle = unbox "borderWidth"
    /// <summary>
    /// The<b><c>border-right-width</c></b> CSS property sets the width of the right border of an element.<br/><br/>
    ///<b>Syntax</b>: <c>line-width</c>
    /// <br/><b>Initial value</b>: <c>medium</c>
    /// </summary>
    static member inline borderRightWidth: ICssStyle = unbox "borderRightWidth"
    /// <summary>
    /// The<b><c>border-spacing</c></b> CSS property sets the distance between the borders of adjacent cells in a <c>table</c>. This property applies only when <c>border-collapse</c> is <c>separate</c>.<br/><br/>
    ///<b>Syntax</b>: <c>length length?</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline borderSpacing: ICssStyle = unbox "borderSpacing"
    /// <summary>
    /// The<b><c>border-start-end-radius</c></b> CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>. This is useful when building styles to work regardless of the text orientation and writing mode.<br/><br/>
    ///<b>Syntax</b>: <c>length-percentage{1,2}</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline borderStartEndRadius: ICssStyle = unbox "borderStartEndRadius"
    /// <summary>
    /// The<b><c>border-start-start-radius</c></b> CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>. This is useful when building styles to work regardless of the text orientation and writing mode.<br/><br/>
    ///<b>Syntax</b>: <c>length-percentage{1,2}</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline borderStartStartRadius: ICssStyle = unbox "borderStartStartRadius"
    /// <summary>
    /// The<b><c>border-top-color</c></b> CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties <c>border-color</c> or <c>border-top</c>.<br/><br/>
    ///<b>Syntax</b>: <c>color</c>
    /// <br/><b>Initial value</b>: <c>currentcolor</c>
    /// </summary>
    static member inline borderTopColor: ICssStyle = unbox "borderTopColor"
    /// <summary>
    /// The<b><c>border-top-left-radius</c></b> CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.<br/><br/>
    ///<b>Syntax</b>: <c>length-percentage{1,2}</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline borderTopLeftRadius: ICssStyle = unbox "borderTopLeftRadius"
    /// <summary>
    /// The<b><c>border-top-right-radius</c></b> CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.<br/><br/>
    ///<b>Syntax</b>: <c>length-percentage{1,2}</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline borderTopRightRadius: ICssStyle = unbox "borderTopRightRadius"
    /// <summary>
    /// The<b><c>border-top-style</c></b> CSS property sets the line style of an element's top <c>border</c>.<br/><br/>
    ///<b>Syntax</b>: <c>line-style</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline borderTopStyle: ICssStyle = unbox "borderTopStyle"
    /// <summary>
    /// The<b><c>border-top-width</c></b> CSS property sets the width of the top border of an element.<br/><br/>
    ///<b>Syntax</b>: <c>line-width</c>
    /// <br/><b>Initial value</b>: <c>medium</c>
    /// </summary>
    static member inline borderTopWidth: ICssStyle = unbox "borderTopWidth"
    /// <summary>
    /// The<b><c>bottom</c></b> CSS property participates in setting the vertical position of a positioned element. It has no effect on non-positioned elements.<br/><br/>
    ///<b>Syntax</b>: <c>length | percentage | auto</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline bottom: ICssStyle = unbox "bottom"
    /// <summary>
    /// The<b><c>box-decoration-break</c></b> CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.<br/><br/>
    ///<b>Syntax</b>: <c>slice | clone</c>
    /// <br/><b>Initial value</b>: <c>slice</c>
    /// </summary>
    static member inline boxDecorationBreak: ICssStyle = unbox "boxDecorationBreak"
    /// <summary>
    /// The<b><c>box-shadow</c></b> CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.<br/><br/>
    ///<b>Syntax</b>: <c>none | shadow#</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline boxShadow: ICssStyle = unbox "boxShadow"
    /// <summary>
    /// The<b><c>box-sizing</c></b> CSS property sets how the total width and height of an element is calculated.<br/><br/>
    ///<b>Syntax</b>: <c>content-box | border-box</c>
    /// <br/><b>Initial value</b>: <c>content-box</c>
    /// </summary>
    static member inline boxSizing: ICssStyle = unbox "boxSizing"
    /// <summary>
    /// The<b><c>break-after</c></b> CSS property sets how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.<br/><br/>
    ///<b>Syntax</b>: <c>auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline breakAfter: ICssStyle = unbox "breakAfter"
    /// <summary>
    /// The<b><c>break-before</c></b> CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.<br/><br/>
    ///<b>Syntax</b>: <c>auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline breakBefore: ICssStyle = unbox "breakBefore"
    /// <summary>
    /// The<b><c>break-inside</c></b> CSS property sets how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.<br/><br/>
    ///<b>Syntax</b>: <c>auto | avoid | avoid-page | avoid-column | avoid-region</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline breakInside: ICssStyle = unbox "breakInside"
    /// <summary>
    /// The<b><c>caption-side</c></b> CSS property puts the content of a table's <c>caption</c> on the specified side. The values are relative to the <c>writing-mode</c> of the table.<br/><br/>
    ///<b>Syntax</b>: <c>top | bottom | block-start | block-end | inline-start | inline-end</c>
    /// <br/><b>Initial value</b>: <c>top</c>
    /// </summary>
    static member inline captionSide: ICssStyle = unbox "captionSide"
    /// <summary>
    /// The<b><c>caret-color</c></b> CSS property sets the color of the<b>insertion caret</b>, the visible marker where the next character typed will be inserted. This is sometimes referred to as the<b>text input cursor</b>. The caret appears in elements such as <c>input</c> or those with the <c>contenteditable</c> attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property.<br/><br/>
    ///<b>Syntax</b>: <c>auto | color</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline caretColor: ICssStyle = unbox "caretColor"
    /// </summary>
    static member inline caretShape: ICssStyle = unbox "caretShape"
    /// <summary>
    /// The<b><c>clear</c></b> CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The <c>clear</c> property applies to floating and non-floating elements.<br/><br/>
    ///<b>Syntax</b>: <c>none | left | right | both | inline-start | inline-end</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline clear: ICssStyle = unbox "clear"
    /// <summary>
    /// The<b><c>clip-path</c></b> CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.<br/><br/>
    ///<b>Syntax</b>: <c>clip-source | [ basic-shape || geometry-box ] | none</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline clipPath: ICssStyle = unbox "clipPath"
    /// <summary>
    /// The<b><c>color</c></b> CSS property sets the foreground color value of an element's text and text decorations, and sets the <c>currentcolor</c> value. <c>currentcolor</c> may be used as an indirect value on _other_ properties and is the default for other color properties, such as <c>border-color</c>.<br/><br/>
    ///<b>Syntax</b>: <c>color</c>
    /// <br/><b>Initial value</b>: <c>canvastext</c>
    /// </summary>
    static member inline color: ICssStyle = unbox "color"
    /// <summary>
    /// The<b><c>print-color-adjust</c></b> CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.<br/><br/>
    ///<b>Syntax</b>: <c>economy | exact</c>
    /// <br/><b>Initial value</b>: <c>economy</c>
    /// </summary>
    static member inline colorAdjust: ICssStyle = unbox "colorAdjust"
    /// <summary>
    /// The<b><c>color-scheme</c></b> CSS property allows an element to indicate which color schemes it can comfortably be rendered in.<br/><br/>
    ///<b>Syntax</b>: <c>normal | [ light | dark | custom-ident ]+ && only?</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline colorScheme: ICssStyle = unbox "colorScheme"
    /// <summary>
    /// The<b><c>column-count</c></b> CSS property breaks an element's content into the specified number of columns.<br/><br/>
    ///<b>Syntax</b>: <c>integer | auto</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline columnCount: ICssStyle = unbox "columnCount"
    /// <summary>
    /// The<b><c>column-fill</c></b> CSS property controls how an element's contents are balanced when broken into columns.<br/><br/>
    ///<b>Syntax</b>: <c>auto | balance | balance-all</c>
    /// <br/><b>Initial value</b>: <c>balance</c>
    /// </summary>
    static member inline columnFill: ICssStyle = unbox "columnFill"
    /// <summary>
    /// The<b><c>column-gap</c></b> CSS property sets the size of the gap (gutter) between an element's columns.<br/><br/>
    ///<b>Syntax</b>: <c>normal | length-percentage</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline columnGap: ICssStyle = unbox "columnGap"
    /// <summary>
    /// The<b><c>column-rule-color</c></b> CSS property sets the color of the line drawn between columns in a multi-column layout.<br/><br/>
    ///<b>Syntax</b>: <c>color</c>
    /// <br/><b>Initial value</b>: <c>currentcolor</c>
    /// </summary>
    static member inline columnRuleColor: ICssStyle = unbox "columnRuleColor"
    /// <summary>
    /// The<b><c>column-rule-style</c></b> CSS property sets the style of the line drawn between columns in a multi-column layout.<br/><br/>
    ///<b>Syntax</b>: <c>'border-style'</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline columnRuleStyle: ICssStyle = unbox "columnRuleStyle"
    /// <summary>
    /// The<b><c>column-rule-width</c></b> CSS property sets the width of the line drawn between columns in a multi-column layout.<br/><br/>
    ///<b>Syntax</b>: <c>'border-width'</c>
    /// <br/><b>Initial value</b>: <c>medium</c>
    /// </summary>
    static member inline columnRuleWidth: ICssStyle = unbox "columnRuleWidth"
    /// <summary>
    /// The<b><c>column-span</c></b> CSS property makes it possible for an element to span across all columns when its value is set to <c>all</c>.<br/><br/>
    ///<b>Syntax</b>: <c>none | all</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline columnSpan: ICssStyle = unbox "columnSpan"
    /// <summary>
    /// The<b><c>column-width</c></b> CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the <c>column-width</c> value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.<br/><br/>
    ///<b>Syntax</b>: <c>length | auto</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline columnWidth: ICssStyle = unbox "columnWidth"
    /// <summary>
    /// The<b><c>contain</c></b> CSS property indicates that an element and its contents are, as much as possible, independent from the rest of the document tree. Containment enables isolating a subsection of the DOM, providing performance benefits by limiting calculations of layout, style, paint, size, or any combination to a DOM subtree rather than the entire page. Containment can also be used to scope CSS counters and quotes.<br/><br/>
    ///<b>Syntax</b>: <c>none | strict | content | [ [ size || inline-size ] || layout || style || paint ]</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline contain: ICssStyle = unbox "contain"
    /// <summary>
    /// The<b><c>contain-intrinsic-block-size</c></b> CSS logical property defines the block size of an element that a browser can use for layout when the element is subject to size containment.<br/><br/>
    ///<b>Syntax</b>: <c>auto? [ none | length ]</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline containIntrinsicBlockSize: ICssStyle = unbox "containIntrinsicBlockSize"
    /// <summary>
    /// The<b><c>contain-intrinsic-length</c></b> CSS property sets the height of an element that a browser can use for layout when the element is subject to size containment.<br/><br/>
    ///<b>Syntax</b>: <c>auto? [ none | length ]</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline containIntrinsicHeight: ICssStyle = unbox "containIntrinsicHeight"
    /// <summary>
    /// The<b><c>contain-intrinsic-inline-size</c></b> CSS logical property defines the inline-size of an element that a browser can use for layout when the element is subject to size containment.<br/><br/>
    ///<b>Syntax</b>: <c>auto? [ none | length ]</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline containIntrinsicInlineSize: ICssStyle = unbox "containIntrinsicInlineSize"
    /// <summary>
    /// The<b><c>contain-intrinsic-width</c></b> CSS property sets the width of an element that a browser will use for layout when the element is subject to size containment.<br/><br/>
    ///<b>Syntax</b>: <c>auto? [ none | length ]</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline containerName: ICssStyle = unbox "containerName"
    /// <summary>
    /// The<b>container-type</b> CSS property is used to define the type of containment used in a container query.<br/><br/>
    ///<b>Syntax</b>: <c>normal | size | inline-size</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline containerType: ICssStyle = unbox "containerType"
    /// <summary>
    /// The<b><c>content</c></b> CSS property replaces an element with a generated value. Objects inserted using the <c>content</c> property are<b>anonymous replaced elements</b>.<br/><br/>
    ///<b>Syntax</b>: <c>normal | none | [ content-replacement | content-list ] [/ [ string | counter ]+ ]?</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline content: ICssStyle = unbox "content"
    /// <summary>
    /// The<b><c>content-visibility</c></b> CSS property controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed. It enables the user agent to skip an element's rendering work (including layout and painting) until it is needed — which makes the initial page load much faster.<br/><br/>
    ///<b>Syntax</b>: <c>visible | auto | hidden</c>
    /// <br/><b>Initial value</b>: <c>visible</c>
    /// </summary>
    static member inline contentVisibility: ICssStyle = unbox "contentVisibility"
    /// <summary>
    /// The<b><c>counter-increment</c></b> CSS property increases or decreases the value of a CSS counter by a given value.<br/><br/>
    ///<b>Syntax</b>: <c>[ counter-name integer? ]+ | none</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline counterIncrement: ICssStyle = unbox "counterIncrement"
    /// <summary>
    /// The<b><c>counter-reset</c></b> CSS property resets a CSS counter to a given value. This property will create a new counter or reversed counter with the given name on the specified element.<br/><br/>
    ///<b>Syntax</b>: <c>[ counter-name integer? | reversed-counter-name integer? ]+ | none</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline counterReset: ICssStyle = unbox "counterReset"
    /// <summary>
    /// The<b><c>counter-set</c></b> CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.<br/><br/>
    ///<b>Syntax</b>: <c>[ counter-name integer? ]+ | none</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline counterSet: ICssStyle = unbox "counterSet"
    /// <summary>
    /// The<b><c>cursor</c></b> CSS property sets the mouse cursor, if any, to show when the mouse pointer is over an element.<br/><br/>
    ///<b>Syntax</b>: <c>[ [ url [ x y ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline cursor: ICssStyle = unbox "cursor"
    /// <summary>
    /// The<b><c>direction</c></b> CSS property sets the direction of text, table columns, and horizontal overflow. Use <c>rtl</c> for languages written from right to left (like Hebrew or Arabic), and <c>ltr</c> for those written from left to right (like English and most other languages).<br/><br/>
    ///<b>Syntax</b>: <c>ltr | rtl</c>
    /// <br/><b>Initial value</b>: <c>ltr</c>
    /// </summary>
    static member inline direction: ICssStyle = unbox "direction"
    /// <summary>
    /// The<b><c>display</c></b> CSS property sets whether an element is treated as a block or element and the layout used for its children, such as flow layout, grid or flex.<br/><br/>
    ///<b>Syntax</b>: <c>[ display-outside || display-inside ] | display-listitem | display-internal | display-box | display-legacy</c>
    /// <br/><b>Initial value</b>: <c>inline</c>
    /// </summary>
    static member inline display: ICssStyle = unbox "display"
    /// <summary>
    /// The<b><c>empty-cells</c></b> CSS property sets whether borders and backgrounds appear around <c>table</c> cells that have no visible content.<br/><br/>
    ///<b>Syntax</b>: <c>show | hide</c>
    /// <br/><b>Initial value</b>: <c>show</c>
    /// </summary>
    static member inline emptyCells: ICssStyle = unbox "emptyCells"
    /// <summary>
    /// The<b><c>filter</c></b> CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.<br/><br/>
    ///<b>Syntax</b>: <c>none | filter-function-list</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline filter: ICssStyle = unbox "filter"
    /// <summary>
    /// The<b><c>flex-basis</c></b> CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with <c>box-sizing</c>.<br/><br/>
    ///<b>Syntax</b>: <c>content | 'width'</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline flexBasis: ICssStyle = unbox "flexBasis"
    /// <summary>
    /// The<b><c>flex-direction</c></b> CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).<br/><br/>
    ///<b>Syntax</b>: <c>row | row-reverse | column | column-reverse</c>
    /// <br/><b>Initial value</b>: <c>row</c>
    /// </summary>
    static member inline flexDirection: ICssStyle = unbox "flexDirection"
    /// <summary>
    /// The<b><c>flex-grow</c></b> CSS property sets the flex grow factor of a flex item's main size.<br/><br/>
    ///<b>Syntax</b>: <c>number</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline flexGrow: ICssStyle = unbox "flexGrow"
    /// <summary>
    /// The<b><c>flex-shrink</c></b> CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to <c>flex-shrink</c>.<br/><br/>
    ///<b>Syntax</b>: <c>number</c>
    /// <br/><b>Initial value</b>: <c>1</c>
    /// </summary>
    static member inline flexShrink: ICssStyle = unbox "flexShrink"
    /// <summary>
    /// The<b><c>flex-wrap</c></b> CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.<br/><br/>
    ///<b>Syntax</b>: <c>nowrap | wrap | wrap-reverse</c>
    /// <br/><b>Initial value</b>: <c>nowrap</c>
    /// </summary>
    static member inline flexWrap: ICssStyle = unbox "flexWrap"
    /// <summary>
    /// The<b><c>float</c></b> CSS property places an element on the left or right side of its container, allowing text and elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).<br/><br/>
    ///<b>Syntax</b>: <c>left | right | none | inline-start | inline-end</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline float: ICssStyle = unbox "float"
    /// <summary>
    /// The<b><c>font-family</c></b> CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.<br/><br/>
    ///<b>Syntax</b>: <c>[ family-name | generic-family ]#</c>
    /// <br/><b>Initial value</b>: depends on user agent
    /// </summary>
    static member inline fontFamily: ICssStyle = unbox "fontFamily"
    /// <summary>
    /// The<b><c>font-feature-settings</c></b> CSS property controls advanced typographic features in OpenType fonts.<br/><br/>
    ///<b>Syntax</b>: <c>normal | feature-tag-value#</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline fontFeatureSettings: ICssStyle = unbox "fontFeatureSettings"
    /// <summary>
    /// The<b><c>font-kerning</c></b> CSS property sets the use of the kerning information stored in a font.<br/><br/>
    ///<b>Syntax</b>: <c>auto | normal | none</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline fontKerning: ICssStyle = unbox "fontKerning"
    /// <summary>
    /// The<b><c>font-language-override</c></b> CSS property controls the use of language-specific glyphs in a typeface.<br/><br/>
    ///<b>Syntax</b>: <c>normal | string</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline fontLanguageOverride: ICssStyle = unbox "fontLanguageOverride"
    /// <summary>
    /// The<b><c>font-optical-sizing</c></b> CSS property sets whether text rendering is optimized for viewing at different sizes.<br/><br/>
    ///<b>Syntax</b>: <c>auto | none</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline fontOpticalSizing: ICssStyle = unbox "fontOpticalSizing"
    /// <summary>
    ///<b>Syntax</b>: <c>normal | light | dark | palette-identifier</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline fontPalette: ICssStyle = unbox "fontPalette"
    /// <summary>
    /// The<b><c>font-size</c></b> CSS property sets the size of the font. Changing the font size also updates the sizes of the font size-relative <c>length</c> units, such as <c>em</c>, <c>ex</c>, and so forth.<br/><br/>
    ///<b>Syntax</b>: <c>absolute-size | relative-size | length-percentage</c>
    /// <br/><b>Initial value</b>: <c>medium</c>
    /// </summary>
    static member inline fontSize: ICssStyle = unbox "fontSize"
    /// <summary>
    /// The<b><c>font-size-adjust</c></b> CSS property sets the size of lower-case letters relative to the current font size (which defines the size of upper-case letters).<br/><br/>
    ///<b>Syntax</b>: <c>none | [ ex-height | cap-height | ch-width | ic-width | ic-height ]? [ from-font | number ]</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline fontSizeAdjust: ICssStyle = unbox "fontSizeAdjust"
    /// <summary>
    /// The<b><c>font-smooth</c></b> CSS property controls the application of anti-aliasing when fonts are rendered.<br/><br/>
    ///<b>Syntax</b>: <c>auto | never | always | absolute-size | length</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline fontSmooth: ICssStyle = unbox "fontSmooth"
    /// <summary>
    /// The<b><c>font-stretch</c></b> CSS property selects a normal, condensed, or expanded face from a font.<br/><br/>
    ///<b>Syntax</b>: <c>font-stretch-absolute</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline fontStretch: ICssStyle = unbox "fontStretch"
    /// <summary>
    /// The<b><c>font-style</c></b> CSS property sets whether a font should be styled with a normal, italic, or oblique face from its <c>font-family</c>.<br/><br/>
    ///<b>Syntax</b>: <c>normal | italic | oblique angle?</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline fontStyle: ICssStyle = unbox "fontStyle"
    /// <summary>
    /// The<b><c>font-synthesis</c></b> CSS property controls which missing typefaces, bold, italic, or small-caps, may be synthesized by the browser.<br/><br/>
    ///<b>Syntax</b>: <c>none | [ weight || style || small-caps || position]</c>
    /// <br/><b>Initial value</b>: <c>weight style small-caps position </c>
    /// </summary>
    static member inline fontSynthesis: ICssStyle = unbox "fontSynthesis"
    /// <summary>
    /// The<b><c>font-synthesis-position</c></b> CSS property lets you specify whether or not a browser may synthesize the subscript and superscript "position" typefaces when they are missing in a font family, while using <c>font-variant-position</c> to set the positions.<br/><br/>
    ///<b>Syntax</b>: <c>auto | none</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline fontSynthesisPosition: ICssStyle = unbox "fontSynthesisPosition"
    /// <summary>
    /// The<b><c>font-synthesis-small-caps</c></b> CSS property lets you specify whether or not the browser may synthesize small-caps typeface when it is missing in a font family. Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters.<br/><br/>
    ///<b>Syntax</b>: <c>auto | none</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline fontSynthesisSmallCaps: ICssStyle = unbox "fontSynthesisSmallCaps"
    /// <summary>
    /// The<b><c>font-synthesis-style</c></b> CSS property lets you specify whether or not the browser may synthesize the oblique typeface when it is missing in a font family.<br/><br/>
    ///<b>Syntax</b>: <c>auto | none</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline fontSynthesisStyle: ICssStyle = unbox "fontSynthesisStyle"
    /// <summary>
    /// The<b><c>font-synthesis-weight</c></b> CSS property lets you specify whether or not the browser may synthesize the bold typeface when it is missing in a font family.<br/><br/>
    ///<b>Syntax</b>: <c>auto | none</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline fontSynthesisWeight: ICssStyle = unbox "fontSynthesisWeight"
    /// <summary>
    /// The<b><c>font-variant</c></b> CSS shorthand property allows you to set all the font variants for a font.<br/><br/>
    ///<b>Syntax</b>: <c>normal | none | [ common-lig-values || discretionary-lig-values || historical-lig-values || contextual-alt-values || stylistic( feature-value-name ) || historical-forms || styleset( feature-value-name# ) || character-variant( feature-value-name# ) || swash( feature-value-name ) || ornaments( feature-value-name ) || annotation( feature-value-name ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || numeric-figure-values || numeric-spacing-values || numeric-fraction-values || ordinal || slashed-zero || east-asian-variant-values || east-asian-width-values || ruby ]</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline fontVariant: ICssStyle = unbox "fontVariant"
    /// <summary>
    /// The<b><c>font-variant-alternates</c></b> CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in <c>@font-feature-values</c>.<br/><br/>
    ///<b>Syntax</b>: <c>normal | [ stylistic( feature-value-name ) || historical-forms || styleset( feature-value-name# ) || character-variant( feature-value-name# ) || swash( feature-value-name ) || ornaments( feature-value-name ) || annotation( feature-value-name ) ]</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline fontVariantAlternates: ICssStyle = unbox "fontVariantAlternates"
    /// <summary>
    /// The<b><c>font-variant-caps</c></b> CSS property controls the use of alternate glyphs for capital letters.<br/><br/>
    ///<b>Syntax</b>: <c>normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline fontVariantCaps: ICssStyle = unbox "fontVariantCaps"
    /// <summary>
    /// The<b><c>font-variant-east-asian</c></b> CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese.<br/><br/>
    ///<b>Syntax</b>: <c>normal | [ east-asian-variant-values || east-asian-width-values || ruby ]</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline fontVariantEastAsian: ICssStyle = unbox "fontVariantEastAsian"
    /// <summary>
    ///<b>Syntax</b>: <c>normal | text | emoji | unicode</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline fontVariantEmoji: ICssStyle = unbox "fontVariantEmoji"
    /// <summary>
    /// The<b><c>font-variant-ligatures</c></b> CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.<br/><br/>
    ///<b>Syntax</b>: <c>normal | none | [ common-lig-values || discretionary-lig-values || historical-lig-values || contextual-alt-values ]</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline fontVariantLigatures: ICssStyle = unbox "fontVariantLigatures"
    /// <summary>
    /// The<b><c>font-variant-numeric</c></b> CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.<br/><br/>
    ///<b>Syntax</b>: <c>normal | [ numeric-figure-values || numeric-spacing-values || numeric-fraction-values || ordinal || slashed-zero ]</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline fontVariantNumeric: ICssStyle = unbox "fontVariantNumeric"
    /// <summary>
    /// The<b><c>font-variant-position</c></b> CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.<br/><br/>
    ///<b>Syntax</b>: <c>normal | sub | super</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline fontVariantPosition: ICssStyle = unbox "fontVariantPosition"
    /// <summary>
    /// The<b><c>font-variation-settings</c></b> CSS property provides low-level control over variable font characteristics, by specifying the four letter axis names of the characteristics you want to vary, along with their values.<br/><br/>
    ///<b>Syntax</b>: <c>normal | [ string number ]#</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline fontVariationSettings: ICssStyle = unbox "fontVariationSettings"
    /// <summary>
    /// The<b><c>font-weight</c></b> CSS property sets the weight (or boldness) of the font. The weights available depend on the <c>font-family</c> that is currently set.<br/><br/>
    ///<b>Syntax</b>: <c>font-weight-absolute | bolder | lighter</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline fontWeight: ICssStyle = unbox "fontWeight"
    /// <summary>
    /// The<b><c>forced-color-adjust</c></b> CSS property allows authors to opt certain elements out of forced colors mode. This then restores the control of those values to CSS.<br/><br/>
    ///<b>Syntax</b>: <c>auto | none</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline forcedColorAdjust: ICssStyle = unbox "forcedColorAdjust"
    /// <summary>
    /// The<b><c>grid-auto-columns</c></b> CSS property specifies the size of an implicitly-created grid column track or pattern of tracks.<br/><br/>
    ///<b>Syntax</b>: <c>track-size+</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline gridAutoColumns: ICssStyle = unbox "gridAutoColumns"
    /// <summary>
    /// The<b><c>grid-auto-flow</c></b> CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.<br/><br/>
    ///<b>Syntax</b>: <c>[ row | column ] || dense</c>
    /// <br/><b>Initial value</b>: <c>row</c>
    /// </summary>
    static member inline gridAutoFlow: ICssStyle = unbox "gridAutoFlow"
    /// <summary>
    /// The<b><c>grid-auto-rows</c></b> CSS property specifies the size of an implicitly-created grid row track or pattern of tracks.<br/><br/>
    ///<b>Syntax</b>: <c>track-size+</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline gridAutoRows: ICssStyle = unbox "gridAutoRows"
    /// <summary>
    /// The<b><c>grid-column-end</c></b> CSS property specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.<br/><br/>
    ///<b>Syntax</b>: <c>grid-line</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline gridColumnEnd: ICssStyle = unbox "gridColumnEnd"
    /// <summary>
    /// The<b><c>grid-column-start</c></b> CSS property specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.<br/><br/>
    ///<b>Syntax</b>: <c>grid-line</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline gridColumnStart: ICssStyle = unbox "gridColumnStart"
    /// <summary>
    /// The<b><c>grid-row-end</c></b> CSS property specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.<br/><br/>
    ///<b>Syntax</b>: <c>grid-line</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline gridRowEnd: ICssStyle = unbox "gridRowEnd"
    /// <summary>
    /// The<b><c>grid-row-start</c></b> CSS property specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.<br/><br/>
    ///<b>Syntax</b>: <c>grid-line</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline gridRowStart: ICssStyle = unbox "gridRowStart"
    /// <summary>
    /// The<b><c>grid-template-areas</c></b> CSS property specifies named grid areas, establishing the cells in the grid and assigning them names.<br/><br/>
    ///<b>Syntax</b>: <c>none | string+</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline gridTemplateAreas: ICssStyle = unbox "gridTemplateAreas"
    /// <summary>
    /// The<b><c>grid-template-columns</c></b> CSS property defines the line names and track sizing functions of the grid columns.<br/><br/>
    ///<b>Syntax</b>: <c>none | track-list | auto-track-list | subgrid line-name-list?</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline gridTemplateColumns: ICssStyle = unbox "gridTemplateColumns"
    /// <summary>
    /// The<b><c>grid-template-rows</c></b> CSS property defines the line names and track sizing functions of the grid rows.<br/><br/>
    ///<b>Syntax</b>: <c>none | track-list | auto-track-list | subgrid line-name-list?</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline gridTemplateRows: ICssStyle = unbox "gridTemplateRows"
    /// <summary>
    /// The<b><c>hanging-punctuation</c></b> CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.<br/><br/>
    ///<b>Syntax</b>: <c>none | [ first || [ force-end | allow-end ] || last ]</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline hangingPunctuation: ICssStyle = unbox "hangingPunctuation"
    /// <summary>
    /// The<b><c>height</c></b> CSS property specifies the height of an element. By default, the property defines the height of the content area. If <c>box-sizing</c> is set to <c>border-box</c>, however, it instead determines the height of the border area.<br/><br/>
    ///<b>Syntax</b>: <c>auto | length | percentage | min-content | max-content | fit-content | fit-content(length-percentage)</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline height: ICssStyle = unbox "height"
    /// <summary>
    /// The<b><c>hyphenate-character</c></b> CSS property sets the character (or string) used at the end of a line before a hyphenation break.<br/><br/>
    ///<b>Syntax</b>: <c>auto | string</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline hyphenateCharacter: ICssStyle = unbox "hyphenateCharacter"
    /// <summary>
    /// The<b><c>hyphenate-limit-chars</c></b> CSS property specifies the minimum word length to allow hyphenation of words as well as the the minimum number of characters before and after the hyphen.<br/><br/>
    ///<b>Syntax</b>: <c>[ auto | integer ]{1,3}</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline hyphenateLimitChars: ICssStyle = unbox "hyphenateLimitChars"
    /// <summary>
    /// The<b><c>hyphens</c></b> CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.<br/><br/>
    ///<b>Syntax</b>: <c>none | manual | auto</c>
    /// <br/><b>Initial value</b>: <c>manual</c>
    /// </summary>
    static member inline hyphens: ICssStyle = unbox "hyphens"
    /// <summary>
    /// The<b><c>image-orientation</c></b> CSS property specifies a layout-independent correction to the orientation of an image.<br/><br/>
    ///<b>Syntax</b>: <c>from-image | angle | [ angle? flip ]</c>
    /// <br/><b>Initial value</b>: <c>from-image</c>
    /// </summary>
    static member inline imageOrientation: ICssStyle = unbox "imageOrientation"
    /// <summary>
    /// The<b><c>image-rendering</c></b> CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.<br/><br/>
    ///<b>Syntax</b>: <c>auto | crisp-edges | pixelated</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline imageRendering: ICssStyle = unbox "imageRendering"
    /// </summary>
    static member inline imageResolution: ICssStyle = unbox "imageResolution"
    /// <summary>
    /// The <c>initial-letter</c> CSS property sets styling for dropped, raised, and sunken initial letters.<br/><br/>
    ///<b>Syntax</b>: <c>normal | [ number integer? ]</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline initialLetter: ICssStyle = unbox "initialLetter"
    /// <summary>
    /// The<b><c>inline-size</c></b> CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the <c>width</c> or the <c>height</c> property, depending on the value of <c>writing-mode</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'width'</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline inlineSize: ICssStyle = unbox "inlineSize"
    /// </summary>
    static member inline inputSecurity: ICssStyle = unbox "inputSecurity"
    /// <summary>
    /// The<b><c>inset-block-end</c></b> CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>top</c>, <c>right</c>, <c>bottom</c>, or <c>left</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'top'</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline insetBlockEnd: ICssStyle = unbox "insetBlockEnd"
    /// <summary>
    /// The<b><c>inset-block-start</c></b> CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>top</c>, <c>right</c>, <c>bottom</c>, or <c>left</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'top'</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline insetBlockStart: ICssStyle = unbox "insetBlockStart"
    /// <summary>
    /// The<b><c>inset-inline-end</c></b> CSS property defines the logical end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>top</c>, <c>right</c>, <c>bottom</c>, or <c>left</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'top'</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline insetInlineEnd: ICssStyle = unbox "insetInlineEnd"
    /// <summary>
    /// The<b><c>inset-inline-start</c></b> CSS property defines the logical start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>top</c>, <c>right</c>, <c>bottom</c>, or <c>left</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'top'</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline insetInlineStart: ICssStyle = unbox "insetInlineStart"
    /// <summary>
    /// The<b><c>isolation</c></b> CSS property determines whether an element must create a new stacking context.<br/><br/>
    ///<b>Syntax</b>: <c>auto | isolate</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline isolation: ICssStyle = unbox "isolation"
    /// <summary>
    /// The CSS<b><c>justify-content</c></b> property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the axis of a grid container.<br/><br/>
    ///<b>Syntax</b>: <c>normal | content-distribution | overflow-position? [ content-position | left | right ]</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline justifyContent: ICssStyle = unbox "justifyContent"
    /// <summary>
    /// The CSS<b><c>justify-items</c></b> property defines the default <c>justify-self</c> for all items of the box, giving them all a default way of justifying each box along the appropriate axis.<br/><br/>
    ///<b>Syntax</b>: <c>normal | stretch | baseline-position | overflow-position? [ self-position | left | right ] | legacy | legacy && [ left | right | center ]</c>
    /// <br/><b>Initial value</b>: <c>legacy</c>
    /// </summary>
    static member inline justifyItems: ICssStyle = unbox "justifyItems"
    /// <summary>
    /// The CSS<b><c>justify-self</c></b> property sets the way a box is justified inside its alignment container along the appropriate axis.<br/><br/>
    ///<b>Syntax</b>: <c>auto | normal | stretch | baseline-position | overflow-position? [ self-position | left | right ]</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline justifySelf: ICssStyle = unbox "justifySelf"
    /// <summary>
    /// The<b><c>justify-tracks</c></b> CSS property sets the alignment in the masonry axis for grid containers that have masonry in their axis.<br/><br/>
    ///<b>Syntax</b>: <c>[ normal | content-distribution | overflow-position? [ content-position | left | right ] ]#</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline justifyTracks: ICssStyle = unbox "justifyTracks"
    /// <summary>
    /// The<b><c>left</c></b> CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.<br/><br/>
    ///<b>Syntax</b>: <c>length | percentage | auto</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline left: ICssStyle = unbox "left"
    /// <summary>
    /// The<b><c>letter-spacing</c></b> CSS property sets the horizontal spacing behavior between text characters. This value is added to the natural spacing between characters while rendering the text. Positive values of <c>letter-spacing</c> causes characters to spread farther apart, while negative values of <c>letter-spacing</c> bring characters closer together.<br/><br/>
    ///<b>Syntax</b>: <c>normal | length</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline letterSpacing: ICssStyle = unbox "letterSpacing"
    /// <summary>
    /// The<b><c>line-break</c></b> CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.<br/><br/>
    ///<b>Syntax</b>: <c>auto | loose | normal | strict | anywhere</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline lineBreak: ICssStyle = unbox "lineBreak"
    /// <summary>
    /// The<b><c>line-height</c></b> CSS property sets the height of a line box. It's commonly used to set the distance between lines of text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced elements, it specifies the height that is used to calculate line box height.<br/><br/>
    ///<b>Syntax</b>: <c>normal | number | length | percentage</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline lineHeight: ICssStyle = unbox "lineHeight"
    /// <summary>
    /// The<b><c>line-height-step</c></b> CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit.<br/><br/>
    ///<b>Syntax</b>: <c>length</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline lineHeightStep: ICssStyle = unbox "lineHeightStep"
    /// <summary>
    /// The<b><c>list-style-image</c></b> CSS property sets an image to be used as the list item marker.<br/><br/>
    ///<b>Syntax</b>: <c>image | none</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline listStyleImage: ICssStyle = unbox "listStyleImage"
    /// <summary>
    /// The<b><c>list-style-position</c></b> CSS property sets the position of the <c>::marker</c> relative to a list item.<br/><br/>
    ///<b>Syntax</b>: <c>inside | outside</c>
    /// <br/><b>Initial value</b>: <c>outside</c>
    /// </summary>
    static member inline listStylePosition: ICssStyle = unbox "listStylePosition"
    /// <summary>
    /// The<b><c>list-style-type</c></b> CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.<br/><br/>
    ///<b>Syntax</b>: <c>counter-style | string | none</c>
    /// <br/><b>Initial value</b>: <c>disc</c>
    /// </summary>
    static member inline listStyleType: ICssStyle = unbox "listStyleType"
    /// <summary>
    /// The<b><c>margin-block-end</c></b> CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.<br/><br/>
    ///<b>Syntax</b>: <c>'margin-left'</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline marginBlockEnd: ICssStyle = unbox "marginBlockEnd"
    /// <summary>
    /// The<b><c>margin-block-start</c></b> CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.<br/><br/>
    ///<b>Syntax</b>: <c>'margin-left'</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline marginBlockStart: ICssStyle = unbox "marginBlockStart"
    /// <summary>
    /// The<b><c>margin-bottom</c></b> CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.<br/><br/>
    ///<b>Syntax</b>: <c>length | percentage | auto</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline marginBottom: ICssStyle = unbox "marginBottom"
    /// <summary>
    /// The<b><c>margin-inline-end</c></b> CSS property defines the logical end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the <c>margin-top</c>, <c>margin-right</c>, <c>margin-bottom</c> or <c>margin-left</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'margin-left'</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline marginInlineEnd: ICssStyle = unbox "marginInlineEnd"
    /// <summary>
    /// The<b><c>margin-inline-start</c></b> CSS property defines the logical start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>margin-top</c>, <c>margin-right</c>, <c>margin-bottom</c>, or <c>margin-left</c> property depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'margin-left'</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline marginInlineStart: ICssStyle = unbox "marginInlineStart"
    /// <summary>
    /// The<b><c>margin-left</c></b> CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.<br/><br/>
    ///<b>Syntax</b>: <c>length | percentage | auto</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline marginLeft: ICssStyle = unbox "marginLeft"
    /// <summary>
    /// The<b><c>margin-right</c></b> CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.<br/><br/>
    ///<b>Syntax</b>: <c>length | percentage | auto</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline marginRight: ICssStyle = unbox "marginRight"
    /// <summary>
    /// The<b><c>margin-top</c></b> CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.<br/><br/>
    ///<b>Syntax</b>: <c>length | percentage | auto</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline marginTop: ICssStyle = unbox "marginTop"
    /// <summary>
    /// The <c>margin-trim</c> property allows the container to trim the margins of its children where they adjoin the container's edges.<br/><br/>
    ///<b>Syntax</b>: <c>none | in-flow | all</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline marginTrim: ICssStyle = unbox "marginTrim"
    /// <summary>
    /// The<b><c>mask-border-mode</c></b> CSS property specifies the blending mode used in a mask border.<br/><br/> </summary>
    static member inline maskBorderMode: ICssStyle = unbox "maskBorderMode"
    /// <summary>
    /// The<b><c>mask-border-outset</c></b> CSS property specifies the distance by which an element's mask border is set out from its border box.<br/><br/>
    ///<b>Syntax</b>: <c>[ length | number ]{1,4}</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline maskBorderOutset: ICssStyle = unbox "maskBorderOutset"
    /// <summary>
    /// The<b><c>mask-border-repeat</c></b> CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.<br/><br/>
    ///<b>Syntax</b>: <c>[ stretch | repeat | round | space ]{1,2}</c>
    /// <br/><b>Initial value</b>: <c>stretch</c>
    /// </summary>
    static member inline maskBorderRepeat: ICssStyle = unbox "maskBorderRepeat"
    /// <summary>
    /// The<b><c>mask-border-slice</c></b> CSS property divides the image set by <c>mask-border-source</c> into regions. These regions are used to form the components of an element's mask border.<br/><br/>
    ///<b>Syntax</b>: <c>number-percentage{1,4} fill?</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline maskBorderSlice: ICssStyle = unbox "maskBorderSlice"
    /// <summary>
    /// The<b><c>mask-border-source</c></b> CSS property sets the source image used to create an element's mask border.<br/><br/>
    ///<b>Syntax</b>: <c>none | image</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline maskBorderSource: ICssStyle = unbox "maskBorderSource"
    /// <summary>
    /// The<b><c>mask-border-width</c></b> CSS property sets the width of an element's mask border.<br/><br/>
    ///<b>Syntax</b>: <c>[ length-percentage | number | auto ]{1,4}</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline maskBorderWidth: ICssStyle = unbox "maskBorderWidth"
    /// <summary>
    /// The<b><c>mask-clip</c></b> CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.<br/><br/>
    ///<b>Syntax</b>: <c>[ geometry-box | no-clip ]#</c>
    /// <br/><b>Initial value</b>: <c>border-box</c>
    /// </summary>
    static member inline maskClip: ICssStyle = unbox "maskClip"
    /// <summary>
    /// The<b><c>mask-composite</c></b> CSS property represents a compositing operation used on the current mask layer with the mask layers below it.<br/><br/>
    ///<b>Syntax</b>: <c>compositing-operator#</c>
    /// <br/><b>Initial value</b>: <c>add</c>
    /// </summary>
    static member inline maskComposite: ICssStyle = unbox "maskComposite"
    /// <summary>
    /// The<b><c>mask-image</c></b> CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the <c>mask-mode</c> property.<br/><br/>
    ///<b>Syntax</b>: <c>mask-reference#</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline maskImage: ICssStyle = unbox "maskImage"
    /// <summary>
    /// The<b><c>mask-mode</c></b> CSS property sets whether the mask reference defined by <c>mask-image</c> is treated as a luminance or alpha mask.<br/><br/>
    ///<b>Syntax</b>: <c>masking-mode#</c>
    /// <br/><b>Initial value</b>: <c>match-source</c>
    /// </summary>
    static member inline maskMode: ICssStyle = unbox "maskMode"
    /// <summary>
    /// The<b><c>mask-origin</c></b> CSS property sets the origin of a mask.<br/><br/>
    ///<b>Syntax</b>: <c>geometry-box#</c>
    /// <br/><b>Initial value</b>: <c>border-box</c>
    /// </summary>
    static member inline maskOrigin: ICssStyle = unbox "maskOrigin"
    /// <summary>
    /// The<b><c>mask-position</c></b> CSS property sets the initial position, relative to the mask position layer set by <c>mask-origin</c>, for each defined mask image.<br/><br/>
    ///<b>Syntax</b>: <c>position#</c>
    /// <br/><b>Initial value</b>: <c>center</c>
    /// </summary>
    static member inline maskPosition: ICssStyle = unbox "maskPosition"
    /// <summary>
    /// The<b><c>mask-repeat</c></b> CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.<br/><br/>
    ///<b>Syntax</b>: <c>repeat-style#</c>
    /// <br/><b>Initial value</b>: <c>repeat</c>
    /// </summary>
    static member inline maskRepeat: ICssStyle = unbox "maskRepeat"
    /// <summary>
    /// The<b><c>mask-size</c></b> CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.<br/><br/>
    ///<b>Syntax</b>: <c>bg-size#</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline maskSize: ICssStyle = unbox "maskSize"
    /// <summary>
    /// The<b><c>mask-type</c></b> CSS property sets whether an SVG <c>mask</c> element is used as a _luminance_ or an _alpha_ mask. It applies to the <c>mask</c> element itself.<br/><br/>
    ///<b>Syntax</b>: <c>luminance | alpha</c>
    /// <br/><b>Initial value</b>: <c>luminance</c>
    /// </summary>
    static member inline maskType: ICssStyle = unbox "maskType"
    /// <summary>
    /// This feature is not Baseline because it does not work in some of the most widely-used browsers.<br/><br/>
    ///<b>Syntax</b>: <c>[ pack | next ] || [ definite-first | ordered ]</c>
    /// <br/><b>Initial value</b>: <c>pack</c>
    /// </summary>
    static member inline masonryAutoFlow: ICssStyle = unbox "masonryAutoFlow"
    /// <summary>
    /// The<b><c>math-depth</c></b> property describes a notion of _depth_ for each element of a mathematical formula, with respect to the top-level container of that formula. Concretely, this is used to determine the computed value of the font-size property when its specified value is <c>math</c>.<br/><br/>
    ///<b>Syntax</b>: <c>auto-add | add(integer) | integer</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline mathDepth: ICssStyle = unbox "mathDepth"
    /// <summary>
    /// The <c>math-shift</c> property indicates whether superscripts inside MathML formulas should be raised by a normal or compact shift.<br/><br/>
    ///<b>Syntax</b>: <c>normal | compact</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline mathShift: ICssStyle = unbox "mathShift"
    /// <summary>
    /// The <c>math-style</c> property indicates whether MathML equations should render with normal or compact height.<br/><br/>
    ///<b>Syntax</b>: <c>normal | compact</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline mathStyle: ICssStyle = unbox "mathStyle"
    /// <summary>
    /// The<b><c>max-block-size</c></b> CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by <c>writing-mode</c>. That is, if the writing direction is horizontal, then <c>max-block-size</c> is equivalent to <c>max-height</c>; if the writing direction is vertical, <c>max-block-size</c> is the same as <c>max-width</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'max-width'</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline maxBlockSize: ICssStyle = unbox "maxBlockSize"
    /// <summary>
    /// The<b><c>max-height</c></b> CSS property sets the maximum height of an element. It prevents the used value of the <c>height</c> property from becoming larger than the value specified for <c>max-height</c>.<br/><br/>
    ///<b>Syntax</b>: <c>none | length-percentage | min-content | max-content | fit-content | fit-content(length-percentage)</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline maxHeight: ICssStyle = unbox "maxHeight"
    /// <summary>
    /// The<b><c>max-inline-size</c></b> CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the <c>max-width</c> or the <c>max-height</c> property, depending on the value of <c>writing-mode</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'max-width'</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline maxInlineSize: ICssStyle = unbox "maxInlineSize"
    /// </summary>
    static member inline maxLines: ICssStyle = unbox "maxLines"
    /// <summary>
    /// The<b><c>max-width</c></b> CSS property sets the maximum width of an element. It prevents the used value of the <c>width</c> property from becoming larger than the value specified by <c>max-width</c>.<br/><br/>
    ///<b>Syntax</b>: <c>none | length-percentage | min-content | max-content | fit-content | fit-content(length-percentage)</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline maxWidth: ICssStyle = unbox "maxWidth"
    /// <summary>
    /// The<b><c>min-block-size</c></b> CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the <c>min-width</c> or the <c>min-height</c> property, depending on the value of <c>writing-mode</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'min-width'</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline minBlockSize: ICssStyle = unbox "minBlockSize"
    /// <summary>
    /// The<b><c>min-height</c></b> CSS property sets the minimum height of an element. It prevents the used value of the <c>height</c> property from becoming smaller than the value specified for <c>min-height</c>.<br/><br/>
    ///<b>Syntax</b>: <c>auto | length | percentage | min-content | max-content | fit-content | fit-content(length-percentage)</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline minHeight: ICssStyle = unbox "minHeight"
    /// <summary>
    /// The<b><c>min-inline-size</c></b> CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the <c>min-width</c> or the <c>min-height</c> property, depending on the value of <c>writing-mode</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'min-width'</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline minInlineSize: ICssStyle = unbox "minInlineSize"
    /// <summary>
    /// The<b><c>min-width</c></b> CSS property sets the minimum width of an element. It prevents the used value of the <c>width</c> property from becoming smaller than the value specified for <c>min-width</c>.<br/><br/>
    ///<b>Syntax</b>: <c>auto | length | percentage | min-content | max-content | fit-content | fit-content(length-percentage)</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline minWidth: ICssStyle = unbox "minWidth"
    /// <summary>
    /// The<b><c>mix-blend-mode</c></b> CSS property sets how an element's content should blend with the content of the element's parent and the element's background.<br/><br/>
    ///<b>Syntax</b>: <c>blend-mode | plus-lighter</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline mixBlendMode: ICssStyle = unbox "mixBlendMode"
    /// <summary>
    /// The<b><c>offset-distance</c></b> CSS property specifies a position along an <c>offset-path</c> for an element to be placed.<br/><br/>
    ///<b>Syntax</b>: <c>length-percentage</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline motionDistance: ICssStyle = unbox "motionDistance"
    /// <summary>
    /// The<b><c>offset-path</c></b> CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.<br/><br/>
    ///<b>Syntax</b>: <c>none | offset-path || coord-box</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline motionPath: ICssStyle = unbox "motionPath"
    /// <summary>
    /// The<b><c>offset-rotate</c></b> CSS property defines the orientation/direction of the element as it is positioned along the <c>offset-path</c>.<br/><br/>
    ///<b>Syntax</b>: <c>[ auto | reverse ] || angle</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline motionRotation: ICssStyle = unbox "motionRotation"
    /// <summary>
    /// The<b><c>object-fit</c></b> CSS property sets how the content of a replaced element, such as an <c>img</c> or <c>video</c>, should be resized to fit its container.<br/><br/>
    ///<b>Syntax</b>: <c>fill | contain | cover | none | scale-down</c>
    /// <br/><b>Initial value</b>: <c>fill</c>
    /// </summary>
    static member inline objectFit: ICssStyle = unbox "objectFit"
    /// <summary>
    /// The<b><c>object-position</c></b> CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.<br/><br/>
    ///<b>Syntax</b>: <c>position</c>
    /// <br/><b>Initial value</b>: <c>50% 50%</c>
    /// </summary>
    static member inline objectPosition: ICssStyle = unbox "objectPosition"
    /// <summary>
    ///<b>Syntax</b>: <c>auto | position</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline offsetAnchor: ICssStyle = unbox "offsetAnchor"
    /// <summary>
    /// The<b><c>offset-distance</c></b> CSS property specifies a position along an <c>offset-path</c> for an element to be placed.<br/><br/>
    ///<b>Syntax</b>: <c>length-percentage</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline offsetDistance: ICssStyle = unbox "offsetDistance"
    /// <summary>
    /// The<b><c>offset-path</c></b> CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.<br/><br/>
    ///<b>Syntax</b>: <c>none | offset-path || coord-box</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline offsetPath: ICssStyle = unbox "offsetPath"
    /// <summary>
    ///<b>Syntax</b>: <c>normal | auto | position</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline offsetPosition: ICssStyle = unbox "offsetPosition"
    /// <summary>
    /// The<b><c>offset-rotate</c></b> CSS property defines the orientation/direction of the element as it is positioned along the <c>offset-path</c>.<br/><br/>
    ///<b>Syntax</b>: <c>[ auto | reverse ] || angle</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline offsetRotate: ICssStyle = unbox "offsetRotate"
    /// <summary>
    /// The<b><c>offset-rotate</c></b> CSS property defines the orientation/direction of the element as it is positioned along the <c>offset-path</c>.<br/><br/>
    ///<b>Syntax</b>: <c>[ auto | reverse ] || angle</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline offsetRotation: ICssStyle = unbox "offsetRotation"
    /// <summary>
    /// The<b><c>opacity</c></b> CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.<br/><br/>
    ///<b>Syntax</b>: <c>alpha-value</c>
    /// <br/><b>Initial value</b>: <c>1</c>
    /// </summary>
    static member inline opacity: ICssStyle = unbox "opacity"
    /// <summary>
    /// The<b><c>order</c></b> CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending <c>order</c> value and then by their source code order.<br/><br/>
    ///<b>Syntax</b>: <c>integer</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline order: ICssStyle = unbox "order"
    /// <summary>
    /// The<b><c>orphans</c></b> CSS property sets the minimum number of lines in a block container that must be shown at the _bottom_ of a page, region, or column.<br/><br/>
    ///<b>Syntax</b>: <c>integer</c>
    /// <br/><b>Initial value</b>: <c>2</c>
    /// </summary>
    static member inline orphans: ICssStyle = unbox "orphans"
    /// <summary>
    /// The<b><c>outline-color</c></b> CSS property sets the color of an element's outline.<br/><br/>
    ///<b>Syntax</b>: <c>color | invert</c>
    /// <br/><b>Initial value</b>: <c>invert</c>, for browsers supporting it, <c>currentColor</c> for the other
    /// </summary>
    static member inline outlineColor: ICssStyle = unbox "outlineColor"
    /// <summary>
    /// The<b><c>outline-offset</c></b> CSS property sets the amount of space between an outline and the edge or border of an element.<br/><br/>
    ///<b>Syntax</b>: <c>length</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline outlineOffset: ICssStyle = unbox "outlineOffset"
    /// <summary>
    /// The<b><c>outline-style</c></b> CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the <c>border</c>.<br/><br/>
    ///<b>Syntax</b>: <c>auto | 'border-style'</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline outlineStyle: ICssStyle = unbox "outlineStyle"
    /// <summary>
    /// The CSS<b><c>outline-width</c></b> property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the <c>border</c>.<br/><br/>
    ///<b>Syntax</b>: <c>line-width</c>
    /// <br/><b>Initial value</b>: <c>medium</c>
    /// </summary>
    static member inline outlineWidth: ICssStyle = unbox "outlineWidth"
    /// <summary>
    ///<b>Syntax</b>: <c>auto | none</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline overflowAnchor: ICssStyle = unbox "overflowAnchor"
    /// <summary>
    ///<b>Syntax</b>: <c>visible | hidden | clip | scroll | auto</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline overflowBlock: ICssStyle = unbox "overflowBlock"
    /// <summary>
    /// The<b><c>overflow-clip-box</c></b> CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the <c>overflow-clip-box-inline</c> and <c>overflow-clip-box-block</c> properties.<br/><br/> </summary>
    static member inline overflowClipBox: ICssStyle = unbox "overflowClipBox"
    /// <summary>
    ///<b>Syntax</b>: <c>visual-box || length [0,∞]</c>
    /// <br/><b>Initial value</b>: <c>0px</c>
    /// </summary>
    static member inline overflowClipMargin: ICssStyle = unbox "overflowClipMargin"
    /// <summary>
    ///<b>Syntax</b>: <c>visible | hidden | clip | scroll | auto</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline overflowInline: ICssStyle = unbox "overflowInline"
    /// <summary>
    /// The<b><c>overflow-wrap</c></b> CSS property applies to elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.<br/><br/>
    ///<b>Syntax</b>: <c>normal | break-word | anywhere</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline overflowWrap: ICssStyle = unbox "overflowWrap"
    /// <summary>
    /// The<b><c>overflow-x</c></b> CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.<br/><br/>
    ///<b>Syntax</b>: <c>visible | hidden | clip | scroll | auto</c>
    /// <br/><b>Initial value</b>: <c>visible</c>
    /// </summary>
    static member inline overflowX: ICssStyle = unbox "overflowX"
    /// <summary>
    /// The<b><c>overflow-y</c></b> CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.<br/><br/>
    ///<b>Syntax</b>: <c>visible | hidden | clip | scroll | auto</c>
    /// <br/><b>Initial value</b>: <c>visible</c>
    /// </summary>
    static member inline overflowY: ICssStyle = unbox "overflowY"
    /// <summary>
    /// The<b><c>overlay</c></b> CSS property specifies whether an element appearing in the top layer (for example, a shown popover or modal <c>dialog</c> element) is actually rendered in the top layer. This property is only relevant within a list of <c>transition-property</c> values, and only if <c>allow-discrete</c> is set as the <c>transition-behavior</c>.<br/><br/>
    ///<b>Syntax</b>: <c>none | auto</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline overlay: ICssStyle = unbox "overlay"
    /// <summary>
    /// The<b><c>overscroll-behavior-block</c></b> CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.<br/><br/>
    ///<b>Syntax</b>: <c>contain | none | auto</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline overscrollBehaviorBlock: ICssStyle = unbox "overscrollBehaviorBlock"
    /// <summary>
    /// The<b><c>overscroll-behavior-inline</c></b> CSS property sets the browser's behavior when the direction boundary of a scrolling area is reached.<br/><br/>
    ///<b>Syntax</b>: <c>contain | none | auto</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline overscrollBehaviorInline: ICssStyle = unbox "overscrollBehaviorInline"
    /// <summary>
    /// The<b><c>overscroll-behavior-x</c></b> CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached.<br/><br/>
    ///<b>Syntax</b>: <c>contain | none | auto</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline overscrollBehaviorX: ICssStyle = unbox "overscrollBehaviorX"
    /// <summary>
    /// The<b><c>overscroll-behavior-y</c></b> CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached.<br/><br/>
    ///<b>Syntax</b>: <c>contain | none | auto</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline overscrollBehaviorY: ICssStyle = unbox "overscrollBehaviorY"
    /// <summary>
    /// The<b><c>padding-block-end</c></b> CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.<br/><br/>
    ///<b>Syntax</b>: <c>'padding-left'</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline paddingBlockEnd: ICssStyle = unbox "paddingBlockEnd"
    /// <summary>
    /// The<b><c>padding-block-start</c></b> CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.<br/><br/>
    ///<b>Syntax</b>: <c>'padding-left'</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline paddingBlockStart: ICssStyle = unbox "paddingBlockStart"
    /// <summary>
    /// The<b><c>padding-bottom</c></b> CSS property sets the height of the padding area on the bottom of an element.<br/><br/>
    ///<b>Syntax</b>: <c>length | percentage</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline paddingBottom: ICssStyle = unbox "paddingBottom"
    /// <summary>
    /// The<b><c>padding-inline-end</c></b> CSS property defines the logical end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.<br/><br/>
    ///<b>Syntax</b>: <c>'padding-left'</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline paddingInlineEnd: ICssStyle = unbox "paddingInlineEnd"
    /// <summary>
    /// The<b><c>padding-inline-start</c></b> CSS property defines the logical start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.<br/><br/>
    ///<b>Syntax</b>: <c>'padding-left'</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline paddingInlineStart: ICssStyle = unbox "paddingInlineStart"
    /// <summary>
    /// The<b><c>padding-left</c></b> CSS property sets the width of the padding area to the left of an element.<br/><br/>
    ///<b>Syntax</b>: <c>length | percentage</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline paddingLeft: ICssStyle = unbox "paddingLeft"
    /// <summary>
    /// The<b><c>padding-right</c></b> CSS property sets the width of the padding area on the right of an element.<br/><br/>
    ///<b>Syntax</b>: <c>length | percentage</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline paddingRight: ICssStyle = unbox "paddingRight"
    /// <summary>
    /// The<b><c>padding-top</c></b> CSS property sets the height of the padding area on the top of an element.<br/><br/>
    ///<b>Syntax</b>: <c>length | percentage</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline paddingTop: ICssStyle = unbox "paddingTop"
    /// <summary>
    /// The<b><c>page</c></b> CSS property is used to specify the named page, a specific type of page defined by the <c>@page</c> at-rule.<br/><br/>
    ///<b>Syntax</b>: <c>auto | custom-ident</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline page: ICssStyle = unbox "page"
    /// <summary>
    /// The<b><c>page-break-after</c></b> CSS property adjusts page breaks _after_ the current element.<br/><br/>
    ///<b>Syntax</b>: <c>auto | always | avoid | left | right | recto | verso</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline pageBreakAfter: ICssStyle = unbox "pageBreakAfter"
    /// <summary>
    /// The<b><c>page-break-before</c></b> CSS property adjusts page breaks _before_ the current element.<br/><br/>
    ///<b>Syntax</b>: <c>auto | always | avoid | left | right | recto | verso</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline pageBreakBefore: ICssStyle = unbox "pageBreakBefore"
    /// <summary>
    /// The<b><c>page-break-inside</c></b> CSS property adjusts page breaks _inside_ the current element.<br/><br/>
    ///<b>Syntax</b>: <c>auto | avoid</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline pageBreakInside: ICssStyle = unbox "pageBreakInside"
    /// <summary>
    /// The<b><c>paint-order</c></b> CSS property lets you control the order in which the fill and stroke (and painting markers) of text content and shapes are drawn.<br/><br/>
    ///<b>Syntax</b>: <c>normal | [ fill || stroke || markers ]</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline paintOrder: ICssStyle = unbox "paintOrder"
    /// <summary>
    /// The<b><c>perspective</c></b> CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.<br/><br/>
    ///<b>Syntax</b>: <c>none | length</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline perspective: ICssStyle = unbox "perspective"
    /// <summary>
    /// The<b><c>perspective-origin</c></b> CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the <c>perspective</c> property.<br/><br/>
    ///<b>Syntax</b>: <c>position</c>
    /// <br/><b>Initial value</b>: <c>50% 50%</c>
    /// </summary>
    static member inline perspectiveOrigin: ICssStyle = unbox "perspectiveOrigin"
    /// <summary>
    /// The<b><c>pointer-events</c></b> CSS property sets under what circumstances (if any) a particular graphic element can become the target of pointer events.<br/><br/>
    ///<b>Syntax</b>: <c>auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline pointerEvents: ICssStyle = unbox "pointerEvents"
    /// <summary>
    /// The<b><c>position</c></b> CSS property sets how an element is positioned in a document. The <c>top</c>, <c>right</c>, <c>bottom</c>, and <c>left</c> properties determine the final location of positioned elements.<br/><br/>
    ///<b>Syntax</b>: <c>static | relative | absolute | sticky | fixed</c>
    /// <br/><b>Initial value</b>: <c>static</c>
    /// </summary>
    static member inline position: ICssStyle = unbox "position"
    /// <summary>
    /// The<b><c>print-color-adjust</c></b> CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.<br/><br/>
    ///<b>Syntax</b>: <c>economy | exact</c>
    /// <br/><b>Initial value</b>: <c>economy</c>
    /// </summary>
    static member inline printColorAdjust: ICssStyle = unbox "printColorAdjust"
    /// <summary>
    /// The<b><c>quotes</c></b> CSS property sets how the browser should render quotation marks that are added using the <c>open-quotes</c> or <c>close-quotes</c> values of the CSS <c>content</c> property.<br/><br/>
    ///<b>Syntax</b>: <c>none | auto | [ string string ]+</c>
    /// <br/><b>Initial value</b>: depends on user agent
    /// </summary>
    static member inline quotes: ICssStyle = unbox "quotes"
    /// <summary>
    /// The<b><c>resize</c></b> CSS property sets whether an element is resizable, and if so, in which directions.<br/><br/>
    ///<b>Syntax</b>: <c>none | both | horizontal | vertical | block | inline</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline resize: ICssStyle = unbox "resize"
    /// <summary>
    /// The<b><c>right</c></b> CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.<br/><br/>
    ///<b>Syntax</b>: <c>length | percentage | auto</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline right: ICssStyle = unbox "right"
    /// <summary>
    /// The<b><c>rotate</c></b> CSS property allows you to specify rotation transforms individually and independently of the <c>transform</c> property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the <c>transform</c> property.<br/><br/>
    ///<b>Syntax</b>: <c>none | angle | [ x | y | z | number{3} ] && angle</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline rotate: ICssStyle = unbox "rotate"
    /// <summary>
    /// The<b><c>row-gap</c></b> CSS property sets the size of the gap (gutter) between an element's rows.<br/><br/>
    ///<b>Syntax</b>: <c>normal | length-percentage</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline rowGap: ICssStyle = unbox "rowGap"
    /// <summary>
    /// The<b><c>ruby-align</c></b> CSS property defines the distribution of the different ruby elements over the base.<br/><br/>
    ///<b>Syntax</b>: <c>start | center | space-between | space-around</c>
    /// <br/><b>Initial value</b>: <c>space-around</c>
    /// </summary>
    static member inline rubyAlign: ICssStyle = unbox "rubyAlign"
    /// </summary>
    static member inline rubyMerge: ICssStyle = unbox "rubyMerge"
    /// <summary>
    /// The<b><c>ruby-position</c></b> CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (<c>over</c>), under it (<c>under</c>), or between the characters on their right side (<c>inter-character</c>).<br/><br/>
    ///<b>Syntax</b>: <c>[ alternate || [ over | under ] ] | inter-character</c>
    /// <br/><b>Initial value</b>: <c>alternate</c>
    /// </summary>
    static member inline rubyPosition: ICssStyle = unbox "rubyPosition"
    /// <summary>
    /// The<b><c>scale</c></b> CSS property allows you to specify scale transforms individually and independently of the <c>transform</c> property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the <c>transform</c> value.<br/><br/>
    ///<b>Syntax</b>: <c>none | number{1,3}</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline scale: ICssStyle = unbox "scale"
    /// <summary>
    /// The<b><c>scroll-behavior</c></b> CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.<br/><br/>
    ///<b>Syntax</b>: <c>auto | smooth</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline scrollBehavior: ICssStyle = unbox "scrollBehavior"
    /// <summary>
    /// The <c>scroll-margin-block-end</c> property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.<br/><br/>
    ///<b>Syntax</b>: <c>length</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline scrollMarginBlockEnd: ICssStyle = unbox "scrollMarginBlockEnd"
    /// <summary>
    /// The <c>scroll-margin-block-start</c> property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.<br/><br/>
    ///<b>Syntax</b>: <c>length</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline scrollMarginBlockStart: ICssStyle = unbox "scrollMarginBlockStart"
    /// <summary>
    /// The <c>scroll-margin-bottom</c> property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.<br/><br/>
    ///<b>Syntax</b>: <c>length</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline scrollMarginBottom: ICssStyle = unbox "scrollMarginBottom"
    /// <summary>
    /// The <c>scroll-margin-inline-end</c> property defines the margin of the scroll snap area at the end of the dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.<br/><br/>
    ///<b>Syntax</b>: <c>length</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline scrollMarginInlineEnd: ICssStyle = unbox "scrollMarginInlineEnd"
    /// <summary>
    /// The <c>scroll-margin-inline-start</c> property defines the margin of the scroll snap area at the start of the dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.<br/><br/>
    ///<b>Syntax</b>: <c>length</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline scrollMarginInlineStart: ICssStyle = unbox "scrollMarginInlineStart"
    /// <summary>
    /// The <c>scroll-margin-left</c> property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.<br/><br/>
    ///<b>Syntax</b>: <c>length</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline scrollMarginLeft: ICssStyle = unbox "scrollMarginLeft"
    /// <summary>
    /// The <c>scroll-margin-right</c> property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.<br/><br/>
    ///<b>Syntax</b>: <c>length</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline scrollMarginRight: ICssStyle = unbox "scrollMarginRight"
    /// <summary>
    /// The <c>scroll-margin-top</c> property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.<br/><br/>
    ///<b>Syntax</b>: <c>length</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline scrollMarginTop: ICssStyle = unbox "scrollMarginTop"
    /// <summary>
    /// The <c>scroll-padding-block-end</c> property defines offsets for the end edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.<br/><br/>
    ///<b>Syntax</b>: <c>auto | length-percentage</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline scrollPaddingBlockEnd: ICssStyle = unbox "scrollPaddingBlockEnd"
    /// <summary>
    /// The <c>scroll-padding-block-start</c> property defines offsets for the start edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.<br/><br/>
    ///<b>Syntax</b>: <c>auto | length-percentage</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline scrollPaddingBlockStart: ICssStyle = unbox "scrollPaddingBlockStart"
    /// <summary>
    /// The <c>scroll-padding-bottom</c> property defines offsets for the bottom of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.<br/><br/>
    ///<b>Syntax</b>: <c>auto | length-percentage</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline scrollPaddingBottom: ICssStyle = unbox "scrollPaddingBottom"
    /// <summary>
    /// The <c>scroll-padding-inline-end</c> property defines offsets for the end edge in the dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.<br/><br/>
    ///<b>Syntax</b>: <c>auto | length-percentage</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline scrollPaddingInlineEnd: ICssStyle = unbox "scrollPaddingInlineEnd"
    /// <summary>
    /// The <c>scroll-padding-inline-start</c> property defines offsets for the start edge in the dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.<br/><br/>
    ///<b>Syntax</b>: <c>auto | length-percentage</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline scrollPaddingInlineStart: ICssStyle = unbox "scrollPaddingInlineStart"
    /// <summary>
    /// The <c>scroll-padding-left</c> property defines offsets for the left of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.<br/><br/>
    ///<b>Syntax</b>: <c>auto | length-percentage</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline scrollPaddingLeft: ICssStyle = unbox "scrollPaddingLeft"
    /// <summary>
    /// The <c>scroll-padding-right</c> property defines offsets for the right of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.<br/><br/>
    ///<b>Syntax</b>: <c>auto | length-percentage</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline scrollPaddingRight: ICssStyle = unbox "scrollPaddingRight"
    /// <summary>
    /// The<b><c>scroll-padding-top</c></b> property defines offsets for the top of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.<br/><br/>
    ///<b>Syntax</b>: <c>auto | length-percentage</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline scrollPaddingTop: ICssStyle = unbox "scrollPaddingTop"
    /// <summary>
    /// The <c>scroll-snap-align</c> property specifies the box's snap position as an alignment of its snap area (as the alignment subject) within its snap container's snapport (as the alignment container). The two values specify the snapping alignment in the block axis and axis, respectively. If only one value is specified, the second value defaults to the same value.<br/><br/>
    ///<b>Syntax</b>: <c>[ none | start | end | center ]{1,2}</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline scrollSnapAlign: ICssStyle = unbox "scrollSnapAlign"
    /// <summary>
    /// The <c>scroll-margin-bottom</c> property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.<br/><br/>
    ///<b>Syntax</b>: <c>length</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline scrollSnapMarginBottom: ICssStyle = unbox "scrollSnapMarginBottom"
    /// <summary>
    /// The <c>scroll-margin-left</c> property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.<br/><br/>
    ///<b>Syntax</b>: <c>length</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline scrollSnapMarginLeft: ICssStyle = unbox "scrollSnapMarginLeft"
    /// <summary>
    /// The <c>scroll-margin-right</c> property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.<br/><br/>
    ///<b>Syntax</b>: <c>length</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline scrollSnapMarginRight: ICssStyle = unbox "scrollSnapMarginRight"
    /// <summary>
    /// The <c>scroll-margin-top</c> property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.<br/><br/>
    ///<b>Syntax</b>: <c>length</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline scrollSnapMarginTop: ICssStyle = unbox "scrollSnapMarginTop"
    /// <summary>
    /// The<b><c>scroll-snap-stop</c></b> CSS property defines whether or not the scroll container is allowed to "pass over" possible snap positions.<br/><br/>
    ///<b>Syntax</b>: <c>normal | always</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline scrollSnapStop: ICssStyle = unbox "scrollSnapStop"
    /// <summary>
    /// The<b><c>scroll-snap-type</c></b> CSS property sets how strictly snap points are enforced on the scroll container in case there is one.<br/><br/>
    ///<b>Syntax</b>: <c>none | [ x | y | block | | both ] [ mandatory | proximity ]?</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline scrollSnapType: ICssStyle = unbox "scrollSnapType"
    /// <summary>
    /// The<b><c>scroll-timeline-axis</c></b> CSS property can be used to specify the scrollbar that will be used to provide the timeline for a scroll-timeline animation.<br/><br/>
    ///<b>Syntax</b>: <c>[ block | | x | y ]#</c>
    /// <br/><b>Initial value</b>: <c>block</c>
    /// </summary>
    static member inline scrollTimelineAxis: ICssStyle = unbox "scrollTimelineAxis"
    /// <summary>
    /// The<b><c>scroll-timeline-name</c></b> CSS property defines a name that can be used to identify an element as the source of a scroll timeline for an animation.<br/><br/>
    ///<b>Syntax</b>: <c>none | dashed-ident#</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline scrollTimelineName: ICssStyle = unbox "scrollTimelineName"
    /// <summary>
    /// The<b><c>scrollbar-color</c></b> CSS property sets the color of the scrollbar track and thumb.<br/><br/>
    ///<b>Syntax</b>: <c>auto | color{2}</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline scrollbarColor: ICssStyle = unbox "scrollbarColor"
    /// <summary>
    /// The<b><c>scrollbar-gutter</c></b> CSS property allows authors to reserve space for the scrollbar, preventing unwanted layout changes as the content grows while also avoiding unnecessary visuals when scrolling isn't needed.<br/><br/>
    ///<b>Syntax</b>: <c>auto | stable && both-edges?</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline scrollbarGutter: ICssStyle = unbox "scrollbarGutter"
    /// <summary>
    /// The<b><c>scrollbar-width</c></b> property allows the author to set the maximum thickness of an element's scrollbars when they are shown.<br/><br/>
    ///<b>Syntax</b>: <c>auto | thin | none</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline scrollbarWidth: ICssStyle = unbox "scrollbarWidth"
    /// <summary>
    /// The<b><c>shape-image-threshold</c></b> CSS property sets the alpha channel threshold used to extract the shape using an image as the value for <c>shape-outside</c>.<br/><br/>
    ///<b>Syntax</b>: <c>alpha-value</c>
    /// <br/><b>Initial value</b>: <c>0.0</c>
    /// </summary>
    static member inline shapeImageThreshold: ICssStyle = unbox "shapeImageThreshold"
    /// <summary>
    /// The<b><c>shape-margin</c></b> CSS property sets a margin for a CSS shape created using <c>shape-outside</c>.<br/><br/>
    ///<b>Syntax</b>: <c>length-percentage</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline shapeMargin: ICssStyle = unbox "shapeMargin"
    /// <summary>
    /// The<b><c>shape-outside</c></b> CSS property defines a shape—which may be non-rectangular—around which adjacent content should wrap. By default, content wraps around its margin box; <c>shape-outside</c> provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.<br/><br/>
    ///<b>Syntax</b>: <c>none | [ shape-box || basic-shape ] | image</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline shapeOutside: ICssStyle = unbox "shapeOutside"
    /// <summary>
    /// The<b><c>tab-size</c></b> CSS property is used to customize the width of tab characters (U+0009).<br/><br/>
    ///<b>Syntax</b>: <c>integer | length</c>
    /// <br/><b>Initial value</b>: <c>8</c>
    /// </summary>
    static member inline tabSize: ICssStyle = unbox "tabSize"
    /// <summary>
    /// The<b><c>table-layout</c></b> CSS property sets the algorithm used to lay out <c>table</c> cells, rows, and columns.<br/><br/>
    ///<b>Syntax</b>: <c>auto | fixed</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline tableLayout: ICssStyle = unbox "tableLayout"
    /// <summary>
    /// The<b><c>text-align</c></b> CSS property sets the horizontal alignment of the inline-level content inside a block element or table-cell box. This means it works like <c>vertical-align</c> but in the horizontal direction.<br/><br/>
    ///<b>Syntax</b>: <c>start | end | left | right | center | justify | match-parent</c>
    /// <br/><b>Initial value</b>: <c>start</c>, or a nameless value that acts as <c>left</c> if _direction_ is <c>ltr</c>, <c>right</c> if _direction_ is <c>rtl</c> if <c>start</c> is not supported by the browser.<br/><br/> </summary>
    static member inline textAlign: ICssStyle = unbox "textAlign"
    /// <summary>
    /// The<b><c>text-align-last</c></b> CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.<br/><br/>
    ///<b>Syntax</b>: <c>auto | start | end | left | right | center | justify</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline textAlignLast: ICssStyle = unbox "textAlignLast"
    /// <summary>
    /// The<b><c>text-combine-upright</c></b> CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.<br/><br/>
    ///<b>Syntax</b>: <c>none | all | [ digits integer? ]</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline textCombineUpright: ICssStyle = unbox "textCombineUpright"
    /// <summary>
    /// The<b><c>text-decoration-color</c></b> CSS property sets the color of decorations added to text by <c>text-decoration-line</c>.<br/><br/>
    ///<b>Syntax</b>: <c>color</c>
    /// <br/><b>Initial value</b>: <c>currentcolor</c>
    /// </summary>
    static member inline textDecorationColor: ICssStyle = unbox "textDecorationColor"
    /// <summary>
    /// The<b><c>text-decoration-line</c></b> CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.<br/><br/>
    ///<b>Syntax</b>: <c>none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline textDecorationLine: ICssStyle = unbox "textDecorationLine"
    /// <summary>
    /// The<b><c>text-decoration-skip</c></b> CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.<br/><br/>
    ///<b>Syntax</b>: <c>none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]</c>
    /// <br/><b>Initial value</b>: <c>objects</c>
    /// </summary>
    static member inline textDecorationSkip: ICssStyle = unbox "textDecorationSkip"
    /// <summary>
    /// The<b><c>text-decoration-skip-ink</c></b> CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.<br/><br/>
    ///<b>Syntax</b>: <c>auto | all | none</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline textDecorationSkipInk: ICssStyle = unbox "textDecorationSkipInk"
    /// <summary>
    /// The<b><c>text-decoration-style</c></b> CSS property sets the style of the lines specified by <c>text-decoration-line</c>. The style applies to all lines that are set with <c>text-decoration-line</c>.<br/><br/>
    ///<b>Syntax</b>: <c>solid | double | dotted | dashed | wavy</c>
    /// <br/><b>Initial value</b>: <c>solid</c>
    /// </summary>
    static member inline textDecorationStyle: ICssStyle = unbox "textDecorationStyle"
    /// <summary>
    /// The<b><c>text-decoration-thickness</c></b> CSS property sets the stroke thickness of the decoration line that is used on text in an element, such as a line-through, underline, or overline.<br/><br/>
    ///<b>Syntax</b>: <c>auto | from-font | length | percentage </c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline textDecorationThickness: ICssStyle = unbox "textDecorationThickness"
    /// <summary>
    /// The<b><c>text-emphasis-color</c></b> CSS property sets the color of emphasis marks. This value can also be set using the <c>text-emphasis</c> shorthand.<br/><br/>
    ///<b>Syntax</b>: <c>color</c>
    /// <br/><b>Initial value</b>: <c>currentcolor</c>
    /// </summary>
    static member inline textEmphasisColor: ICssStyle = unbox "textEmphasisColor"
    /// <summary>
    /// The<b><c>text-emphasis-position</c></b> CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.<br/><br/>
    ///<b>Syntax</b>: <c>[ over | under ] && [ right | left ]</c>
    /// <br/><b>Initial value</b>: <c>over right</c>
    /// </summary>
    static member inline textEmphasisPosition: ICssStyle = unbox "textEmphasisPosition"
    /// <summary>
    /// The<b><c>text-emphasis-style</c></b> CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the <c>text-emphasis</c> shorthand.<br/><br/>
    ///<b>Syntax</b>: <c>none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | string</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline textEmphasisStyle: ICssStyle = unbox "textEmphasisStyle"
    /// <summary>
    /// The<b><c>text-indent</c></b> CSS property sets the length of empty space (indentation) that is put before lines of text in a block.<br/><br/>
    ///<b>Syntax</b>: <c>length-percentage && hanging? && each-line?</c>
    /// <br/><b>Initial value</b>: <c>0</c>
    /// </summary>
    static member inline textIndent: ICssStyle = unbox "textIndent"
    /// <summary>
    /// The<b><c>text-justify</c></b> CSS property sets what type of justification should be applied to text when <c>text-align</c><c>: justify;</c> is set on an element.<br/><br/>
    ///<b>Syntax</b>: <c>auto | inter-character | inter-word | none</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline textJustify: ICssStyle = unbox "textJustify"
    /// <summary>
    /// The<b><c>text-orientation</c></b> CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when <c>writing-mode</c> is not <c>horizontal-tb</c>). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.<br/><br/>
    ///<b>Syntax</b>: <c>mixed | upright | sideways</c>
    /// <br/><b>Initial value</b>: <c>mixed</c>
    /// </summary>
    static member inline textOrientation: ICssStyle = unbox "textOrientation"
    /// <summary>
    /// The<b><c>text-overflow</c></b> CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('<c>…</c>'), or display a custom string.<br/><br/>
    ///<b>Syntax</b>: <c>[ clip | ellipsis | string ]{1,2}</c>
    /// <br/><b>Initial value</b>: <c>clip</c>
    /// </summary>
    static member inline textOverflow: ICssStyle = unbox "textOverflow"
    /// <summary>
    /// The<b><c>text-rendering</c></b> CSS property provides information to the rendering engine about what to optimize for when rendering text.<br/><br/>
    ///<b>Syntax</b>: <c>auto | optimizeSpeed | optimizeLegibility | geometricPrecision</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline textRendering: ICssStyle = unbox "textRendering"
    /// <summary>
    /// The<b><c>text-shadow</c></b> CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its <c>decorations</c>. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.<br/><br/>
    ///<b>Syntax</b>: <c>none | shadow-t#</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline textShadow: ICssStyle = unbox "textShadow"
    /// <summary>
    /// The<b><c>text-size-adjust</c></b> CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.<br/><br/>
    ///<b>Syntax</b>: <c>none | auto | percentage</c>
    /// <br/><b>Initial value</b>: <c>auto</c> for smartphone browsers supporting inflation, <c>none</c> in other cases (and then not modifiable).<br/><br/> </summary>
    static member inline textSizeAdjust: ICssStyle = unbox "textSizeAdjust"
    /// <summary>
    /// The<b><c>text-transform</c></b> CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby.<br/><br/>
    ///<b>Syntax</b>: <c>none | capitalize | uppercase | lowercase | full-width | full-size-kana</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline textTransform: ICssStyle = unbox "textTransform"
    /// <summary>
    /// The<b><c>text-underline-offset</c></b> CSS property sets the offset distance of an underline text decoration line (applied using <c>text-decoration</c>) from its original position.<br/><br/>
    ///<b>Syntax</b>: <c>auto | length | percentage </c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline textUnderlineOffset: ICssStyle = unbox "textUnderlineOffset"
    /// <summary>
    /// The<b><c>text-underline-position</c></b> CSS property specifies the position of the underline which is set using the <c>text-decoration</c> property's <c>underline</c> value.<br/><br/>
    ///<b>Syntax</b>: <c>auto | from-font | [ under || [ left | right ] ]</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline textUnderlinePosition: ICssStyle = unbox "textUnderlinePosition"
    /// <summary>
    /// The<b><c>text-wrap</c></b> CSS property controls how text inside an element is wrapped. The different values provide:
    /// <br/><b>Syntax</b>: <c>wrap | nowrap | balance | stable | pretty</c>
    /// <br/><b>Initial value</b>: <c>wrap</c>
    /// </summary>
    static member inline textWrap: ICssStyle = unbox "textWrap"
    /// <summary>
    /// The<b><c>timeline-scope</c></b> CSS property modifies the scope of a named animation timeline.<br/><br/>
    ///<b>Syntax</b>: <c>none | dashed-ident#</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline timelineScope: ICssStyle = unbox "timelineScope"
    /// <summary>
    /// The<b><c>top</c></b> CSS property participates in specifying the vertical position of a positioned element. It has no effect on non-positioned elements.<br/><br/>
    ///<b>Syntax</b>: <c>length | percentage | auto</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline top: ICssStyle = unbox "top"
    /// <summary>
    /// The<b><c>touch-action</c></b> CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).<br/><br/>
    ///<b>Syntax</b>: <c>auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline touchAction: ICssStyle = unbox "touchAction"
    /// <summary>
    /// The<b><c>transform</c></b> CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.<br/><br/>
    ///<b>Syntax</b>: <c>none | transform-list</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline transform: ICssStyle = unbox "transform"
    /// <summary>
    /// The<b><c>transform-box</c></b> CSS property defines the layout box to which the <c>transform</c>, individual transform properties <c>translate</c>,<c>scale</c>, and <c>rotate</c>, and <c>transform-origin</c> properties relate.<br/><br/>
    ///<b>Syntax</b>: <c>content-box | border-box | fill-box | stroke-box | view-box</c>
    /// <br/><b>Initial value</b>: <c>view-box</c>
    /// </summary>
    static member inline transformBox: ICssStyle = unbox "transformBox"
    /// <summary>
    /// The<b><c>transform-origin</c></b> CSS property sets the origin for an element's transformations.<br/><br/>
    ///<b>Syntax</b>: <c>[ length-percentage | left | center | right | top | bottom ] | [ [ length-percentage | left | center | right ] && [ length-percentage | top | center | bottom ] ] length?</c>
    /// <br/><b>Initial value</b>: <c>50% 50% 0</c>
    /// </summary>
    static member inline transformOrigin: ICssStyle = unbox "transformOrigin"
    /// <summary>
    /// The<b><c>transform-style</c></b> CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.<br/><br/>
    ///<b>Syntax</b>: <c>flat | preserve-3d</c>
    /// <br/><b>Initial value</b>: <c>flat</c>
    /// </summary>
    static member inline transformStyle: ICssStyle = unbox "transformStyle"
    /// <summary>
    /// The<b><c>transition-behavior</c></b> CSS property specifies whether transitions will be started for properties whose animation behavior is discrete.<br/><br/>
    ///<b>Syntax</b>: <c>transition-behavior-value#</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline transitionBehavior: ICssStyle = unbox "transitionBehavior"
    /// <summary>
    /// The<b><c>transition-delay</c></b> CSS property specifies the duration to wait before starting a property's transition effect when its value changes.<br/><br/>
    ///<b>Syntax</b>: <c>time#</c>
    /// <br/><b>Initial value</b>: <c>0s</c>
    /// </summary>
    static member inline transitionDelay: ICssStyle = unbox "transitionDelay"
    /// <summary>
    /// The<b><c>transition-duration</c></b> CSS property sets the length of time a transition animation should take to complete. By default, the value is <c>0s</c>, meaning that no animation will occur.<br/><br/>
    ///<b>Syntax</b>: <c>time#</c>
    /// <br/><b>Initial value</b>: <c>0s</c>
    /// </summary>
    static member inline transitionDuration: ICssStyle = unbox "transitionDuration"
    /// <summary>
    /// The<b><c>transition-property</c></b> CSS property sets the CSS properties to which a transition effect should be applied.<br/><br/>
    ///<b>Syntax</b>: <c>none | single-transition-property#</c>
    /// <br/><b>Initial value</b>: all
    /// </summary>
    static member inline transitionProperty: ICssStyle = unbox "transitionProperty"
    /// <summary>
    /// The<b><c>transition-timing-function</c></b> CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.<br/><br/>
    ///<b>Syntax</b>: <c>easing-function#</c>
    /// <br/><b>Initial value</b>: <c>ease</c>
    /// </summary>
    static member inline transitionTimingFunction: ICssStyle = unbox "transitionTimingFunction"
    /// <summary>
    /// The<b><c>translate</c></b> CSS property allows you to specify translation transforms individually and independently of the <c>transform</c> property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the <c>transform</c> value.<br/><br/>
    ///<b>Syntax</b>: <c>none | length-percentage [ length-percentage length? ]?</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline translate: ICssStyle = unbox "translate"
    /// <summary>
    /// The<b><c>unicode-bidi</c></b> CSS property, together with the <c>direction</c> property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The <c>unicode-bidi</c> property overrides this algorithm and allows the developer to control the text embedding.<br/><br/>
    ///<b>Syntax</b>: <c>normal | embed | isolate | bidi-override | isolate-override | plaintext</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline unicodeBidi: ICssStyle = unbox "unicodeBidi"
    /// <summary>
    /// The<b><c>user-select</c></b> CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.<br/><br/>
    ///<b>Syntax</b>: <c>auto | text | none | contain | all</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline userSelect: ICssStyle = unbox "userSelect"
    /// <summary>
    /// The<b><c>vertical-align</c></b> CSS property sets vertical alignment of an inline, inline-block or table-cell box.<br/><br/>
    ///<b>Syntax</b>: <c>baseline | sub | super | text-top | text-bottom | middle | top | bottom | percentage | length</c>
    /// <br/><b>Initial value</b>: <c>baseline</c>
    /// </summary>
    static member inline verticalAlign: ICssStyle = unbox "verticalAlign"
    /// <summary>
    /// The<b><c>view-timeline-axis</c></b> CSS property is used to specify the scrollbar direction that will be used to provide the timeline for a _named view progress timeline_ animation, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). <c>view-timeline-axis</c> is set on the subject. See CSS scroll-driven animations for more details.<br/><br/>
    ///<b>Syntax</b>: <c>[ block | | x | y ]#</c>
    /// <br/><b>Initial value</b>: <c>block</c>
    /// </summary>
    static member inline viewTimelineAxis: ICssStyle = unbox "viewTimelineAxis"
    /// <summary>
    /// The<b><c>view-timeline-inset</c></b> CSS property is used to specify one or two values representing an adjustment to the position of the scrollport (see Scroll container for more details) in which the subject element of a _named view progress timeline_ animation is deemed to be visible. Put another way, this allows you to specify start and/or end inset (or outset) values that offset the position of the timeline.<br/><br/>
    ///<b>Syntax</b>: <c>[ [ auto | length-percentage ]{1,2} ]#</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline viewTimelineInset: ICssStyle = unbox "viewTimelineInset"
    /// <summary>
    /// The<b><c>view-timeline-name</c></b> CSS property is used to define the name of a _named view progress timeline_, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). <c>view-timeline</c> is set on the subject.<br/><br/>
    ///<b>Syntax</b>: <c>none | dashed-ident#</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline viewTimelineName: ICssStyle = unbox "viewTimelineName"
    /// <summary>
    /// The<b><c>view-transition-name</c></b> CSS property provides the selected element with a distinct identifying name (a <c>custom-ident</c>) and causes it to participate in a separate view transition from the root view transition — or no view transition if the <c>none</c> value is specified.<br/><br/>
    ///<b>Syntax</b>: <c>none | custom-ident</c>
    /// <br/><b>Initial value</b>: <c>none</c>
    /// </summary>
    static member inline viewTransitionName: ICssStyle = unbox "viewTransitionName"
    /// <summary>
    /// The<b><c>visibility</c></b> CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a <c>table</c>.<br/><br/>
    ///<b>Syntax</b>: <c>visible | hidden | collapse</c>
    /// <br/><b>Initial value</b>: <c>visible</c>
    /// </summary>
    static member inline visibility: ICssStyle = unbox "visibility"
    /// <summary>
    /// The<b><c>white-space</c></b> CSS property sets how white space inside an element is handled.<br/><br/>
    ///<b>Syntax</b>: <c>normal | pre | nowrap | pre-wrap | pre-line | break-spaces | [ 'white-space-collapse' || 'text-wrap' || 'white-space-trim' ]</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline whiteSpace: ICssStyle = unbox "whiteSpace"
    /// <summary>
    /// The<b><c>white-space-collapse</c></b> CSS property controls how white space inside an element is collapsed.<br/><br/>
    ///<b>Syntax</b>: <c>collapse | discard | preserve | preserve-breaks | preserve-spaces | break-spaces</c>
    /// <br/><b>Initial value</b>: <c>collapse</c>
    /// </summary>
    static member inline whiteSpaceCollapse: ICssStyle = unbox "whiteSpaceCollapse"
    /// </summary>
    static member inline whiteSpaceTrim: ICssStyle = unbox "whiteSpaceTrim"
    /// <summary>
    /// The<b><c>widows</c></b> CSS property sets the minimum number of lines in a block container that must be shown at the _top_ of a page, region, or column.<br/><br/>
    ///<b>Syntax</b>: <c>integer</c>
    /// <br/><b>Initial value</b>: <c>2</c>
    /// </summary>
    static member inline widows: ICssStyle = unbox "widows"
    /// <summary>
    /// The<b><c>width</c></b> CSS property sets an element's width. By default, it sets the width of the content area, but if <c>box-sizing</c> is set to <c>border-box</c>, it sets the width of the border area.<br/><br/>
    ///<b>Syntax</b>: <c>auto | length | percentage | min-content | max-content | fit-content | fit-content(length-percentage)</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline width: ICssStyle = unbox "width"
    /// <summary>
    /// The<b><c>will-change</c></b> CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required.<br/><br/>
    ///<b>Syntax</b>: <c>auto | animateable-feature#</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline willChange: ICssStyle = unbox "willChange"
    /// <summary>
    /// The<b><c>word-break</c></b> CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.<br/><br/>
    ///<b>Syntax</b>: <c>normal | break-all | keep-all | break-word</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline wordBreak: ICssStyle = unbox "wordBreak"
    /// <summary>
    /// The<b><c>word-spacing</c></b> CSS property sets the length of space between words and between tags.<br/><br/>
    ///<b>Syntax</b>: <c>normal | length</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline wordSpacing: ICssStyle = unbox "wordSpacing"
    /// <summary>
    /// The<b><c>overflow-wrap</c></b> CSS property applies to elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.<br/><br/>
    ///<b>Syntax</b>: <c>normal | break-word</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline wordWrap: ICssStyle = unbox "wordWrap"
    /// <summary>
    /// The<b><c>writing-mode</c></b> CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (<c>html</c> element for HTML documents).<br/><br/>
    ///<b>Syntax</b>: <c>horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr</c>
    /// <br/><b>Initial value</b>: <c>horizontal-tb</c>
    /// </summary>
    static member inline writingMode: ICssStyle = unbox "writingMode"
    /// <summary>
    /// The<b><c>z-index</c></b> CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.<br/><br/>
    ///<b>Syntax</b>: <c>auto | integer</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline zIndex: ICssStyle = unbox "zIndex"
    /// <summary>
    /// The non-standard<b><c>zoom</c></b> CSS property can be used to control the magnification level of an element. <c>transform: scale()</c> should be used instead of this property, if possible. However, unlike CSS Transforms, <c>zoom</c> affects the layout size of the element.<br/><br/>
    ///<b>Syntax</b>: <c>normal | reset | number | percentage</c>
    /// <br/><b>Initial value</b>: <c>normal</c>
    /// </summary>
    static member inline zoom: ICssStyle = unbox "zoom"
    /// <summary>
    /// The<b><c>all</c></b> shorthand CSS property resets all of an element's properties except <c>unicode-bidi</c>, <c>direction</c>, and CSS Custom Properties. It can set properties to their initial or inherited values, or to the values specified in another cascade layer or stylesheet origin.<br/><br/>
    ///<b>Syntax</b>: <c>initial | inherit | unset | revert | revert-layer</c>
    /// <br/><b>Initial value</b>: There is no practical initial value for it.<br/><br/> </summary>
    static member inline all: ICssStyle = unbox "all"
    /// <summary>
    /// The<b><c>animation</c></b> shorthand CSS property applies an animation between styles. It is a shorthand for <c>animation-name</c>, <c>animation-duration</c>, <c>animation-timing-function</c>, <c>animation-delay</c>, <c>animation-iteration-count</c>, <c>animation-direction</c>, <c>animation-fill-mode</c>, and <c>animation-play-state</c>.<br/><br/>
    ///<b>Syntax</b>: <c>single-animation#</c>
    /// </summary>
    static member inline animation: ICssStyle = unbox "animation"
    /// <summary>
    /// The<b><c>animation-range</c></b> CSS shorthand property is used to set the start and end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start and end.<br/><br/>
    ///<b>Syntax</b>: <c>[ 'animation-range-start' 'animation-range-end'? ]#</c>
    /// </summary>
    static member inline animationRange: ICssStyle = unbox "animationRange"
    /// <summary>
    /// The<b><c>background</c></b> shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.<br/><br/>
    ///<b>Syntax</b>: <c>[ bg-layer , ]* final-bg-layer</c>
    /// </summary>
    static member inline background: ICssStyle = unbox "background"
    /// <summary>
    /// The<b><c>background-position</c></b> CSS property sets the initial position for each background image. The position is relative to the position layer set by <c>background-origin</c>.<br/><br/>
    ///<b>Syntax</b>: <c>bg-position#</c>
    /// <br/><b>Initial value</b>: <c>0% 0%</c>
    /// </summary>
    static member inline backgroundPosition: ICssStyle = unbox "backgroundPosition"
    /// <summary>
    /// The<b><c>border</c></b> shorthand CSS property sets an element's border. It sets the values of <c>border-width</c>, <c>border-style</c>, and <c>border-color</c>.<br/><br/>
    ///<b>Syntax</b>: <c>line-width || line-style || color</c>
    /// </summary>
    static member inline border: ICssStyle = unbox "border"
    /// <summary>
    /// The<b><c>border-block</c></b> CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-width' || 'border-top-style' || color</c>
    /// </summary>
    static member inline borderBlock: ICssStyle = unbox "borderBlock"
    /// <summary>
    /// The<b><c>border-block-end</c></b> CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-width' || 'border-top-style' || color</c>
    /// </summary>
    static member inline borderBlockEnd: ICssStyle = unbox "borderBlockEnd"
    /// <summary>
    /// The<b><c>border-block-start</c></b> CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-width' || 'border-top-style' || color</c>
    /// </summary>
    static member inline borderBlockStart: ICssStyle = unbox "borderBlockStart"
    /// <summary>
    /// The<b><c>border-bottom</c></b> shorthand CSS property sets an element's bottom border. It sets the values of <c>border-bottom-width</c>, <c>border-bottom-style</c> and <c>border-bottom-color</c>.<br/><br/>
    ///<b>Syntax</b>: <c>line-width || line-style || color</c>
    /// </summary>
    static member inline borderBottom: ICssStyle = unbox "borderBottom"
    /// <summary>
    /// The<b><c>border-color</c></b> shorthand CSS property sets the color of an element's border.<br/><br/>
    ///<b>Syntax</b>: <c>color{1,4}</c>
    /// </summary>
    static member inline borderColor: ICssStyle = unbox "borderColor"
    /// <summary>
    /// The<b><c>border-image</c></b> CSS property draws an image around a given element. It replaces the element's regular border.<br/><br/>
    ///<b>Syntax</b>: <c>'border-image-source' || 'border-image-slice' [ / 'border-image-width' | / 'border-image-width'? / 'border-image-outset' ]? || 'border-image-repeat'</c>
    /// </summary>
    static member inline borderImage: ICssStyle = unbox "borderImage"
    /// <summary>
    /// The<b><c>border-inline</c></b> CSS property is a shorthand property for setting the individual logical border property values in a single place in the style sheet.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-width' || 'border-top-style' || color</c>
    /// </summary>
    static member inline borderInline: ICssStyle = unbox "borderInline"
    /// <summary>
    /// The<b><c>border-inline-end</c></b> CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-width' || 'border-top-style' || color</c>
    /// </summary>
    static member inline borderInlineEnd: ICssStyle = unbox "borderInlineEnd"
    /// <summary>
    /// The<b><c>border-inline-start</c></b> CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.<br/><br/>
    ///<b>Syntax</b>: <c>'border-top-width' || 'border-top-style' || color</c>
    /// </summary>
    static member inline borderInlineStart: ICssStyle = unbox "borderInlineStart"
    /// <summary>
    /// The<b><c>border-left</c></b> shorthand CSS property sets all the properties of an element's left border.<br/><br/>
    ///<b>Syntax</b>: <c>line-width || line-style || color</c>
    /// </summary>
    static member inline borderLeft: ICssStyle = unbox "borderLeft"
    /// <summary>
    /// The<b><c>border-radius</c></b> CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.<br/><br/>
    ///<b>Syntax</b>: <c>length-percentage{1,4} [ / length-percentage{1,4} ]?</c>
    /// </summary>
    static member inline borderRadius: ICssStyle = unbox "borderRadius"
    /// <summary>
    /// The<b><c>border-right</c></b> shorthand CSS property sets all the properties of an element's right border.<br/><br/>
    ///<b>Syntax</b>: <c>line-width || line-style || color</c>
    /// </summary>
    static member inline borderRight: ICssStyle = unbox "borderRight"
    /// <summary>
    /// The<b><c>border-style</c></b> shorthand CSS property sets the line style for all four sides of an element's border.<br/><br/>
    ///<b>Syntax</b>: <c>line-style{1,4}</c>
    /// </summary>
    static member inline borderStyle: ICssStyle = unbox "borderStyle"
    /// <summary>
    /// The<b><c>border-top</c></b> shorthand CSS property sets all the properties of an element's top border.<br/><br/>
    ///<b>Syntax</b>: <c>line-width || line-style || color</c>
    /// </summary>
    static member inline borderTop: ICssStyle = unbox "borderTop"
    /// <summary>
    /// The<b><c>border-width</c></b> shorthand CSS property sets the width of an element's border.<br/><br/>
    ///<b>Syntax</b>: <c>line-width{1,4}</c>
    /// </summary>
    static member inline caret: ICssStyle = unbox "caret"
    /// <summary>
    /// The<b><c>column-rule</c></b> shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.<br/><br/>
    ///<b>Syntax</b>: <c>'column-rule-width' || 'column-rule-style' || 'column-rule-color'</c>
    /// </summary>
    static member inline columnRule: ICssStyle = unbox "columnRule"
    /// <summary>
    /// The<b><c>columns</c></b> CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.<br/><br/>
    ///<b>Syntax</b>: <c>'column-width' || 'column-count'</c>
    /// </summary>
    static member inline columns: ICssStyle = unbox "columns"
    /// <summary>
    /// The<b><c>contain-intrinsic-size</c></b> CSS shorthand property sets the size of an element that a browser will use for layout when the element is subject to size containment.<br/><br/>
    ///<b>Syntax</b>: <c>[ auto? [ none | length ] ]{1,2}</c>
    /// </summary>
    static member inline containIntrinsicSize: ICssStyle = unbox "containIntrinsicSize"
    /// <summary>
    /// The<b>container</b> shorthand CSS property establishes the element as a query container and specifies the name or name for the containment context used in a container query.<br/><br/>
    ///<b>Syntax</b>: <c>'container-name' [ / 'container-type' ]?</c>
    /// </summary>
    static member inline container: ICssStyle = unbox "container"
    /// <summary>
    /// The<b><c>flex</c></b> CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.<br/><br/>
    ///<b>Syntax</b>: <c>none | [ 'flex-grow' 'flex-shrink'? || 'flex-basis' ]</c>
    /// </summary>
    static member inline flex: ICssStyle = unbox "flex"
    /// <summary>
    /// The<b><c>flex-flow</c></b> CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.<br/><br/>
    ///<b>Syntax</b>: <c>'flex-direction' || 'flex-wrap'</c>
    /// </summary>
    static member inline flexFlow: ICssStyle = unbox "flexFlow"
    /// <summary>
    /// The<b><c>font</c></b> CSS shorthand property sets all the different properties of an element's font. Alternatively, it sets an element's font to a system font.<br/><br/>
    ///<b>Syntax</b>: <c>[ [ 'font-style' || font-variant-css21 || 'font-weight' || 'font-stretch' ]? 'font-size' [ / 'line-height' ]? 'font-family' ] | caption | icon | menu | message-box | small-caption | status-bar</c>
    /// </summary>
    static member inline font: ICssStyle = unbox "font"
    /// <summary>
    /// The<b><c>gap</c></b> CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for <c>row-gap</c> and <c>column-gap</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'row-gap' 'column-gap'?</c>
    /// </summary>
    static member inline gap: ICssStyle = unbox "gap"
    /// <summary>
    /// The<b><c>grid</c></b> CSS property is a shorthand property that sets all of the explicit and implicit grid properties in a single declaration.<br/><br/>
    ///<b>Syntax</b>: <c>'grid-template' | 'grid-template-rows' / [ auto-flow && dense? ] 'grid-auto-columns'? | [ auto-flow && dense? ] 'grid-auto-rows'? / 'grid-template-columns'</c>
    /// </summary>
    static member inline grid: ICssStyle = unbox "grid"
    /// <summary>
    /// The<b><c>grid-area</c></b> CSS shorthand property specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.<br/><br/>
    ///<b>Syntax</b>: <c>grid-line [ / grid-line ]{0,3}</c>
    /// </summary>
    static member inline gridArea: ICssStyle = unbox "gridArea"
    /// <summary>
    /// The<b><c>grid-column</c></b> CSS shorthand property specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.<br/><br/>
    ///<b>Syntax</b>: <c>grid-line [ / grid-line ]?</c>
    /// </summary>
    static member inline gridColumn: ICssStyle = unbox "gridColumn"
    /// <summary>
    /// The<b><c>grid-row</c></b> CSS shorthand property specifies a grid item's size and location within a grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.<br/><br/>
    ///<b>Syntax</b>: <c>grid-line [ / grid-line ]?</c>
    /// </summary>
    static member inline gridRow: ICssStyle = unbox "gridRow"
    /// <summary>
    /// The<b><c>grid-template</c></b> CSS property is a shorthand property for defining grid columns, grid rows, and grid areas.<br/><br/>
    ///<b>Syntax</b>: <c>none | [ 'grid-template-rows' / 'grid-template-columns' ] | [ line-names? string track-size? line-names? ]+ [ / explicit-track-list ]?</c>
    /// </summary>
    static member inline gridTemplate: ICssStyle = unbox "gridTemplate"
    /// <summary>
    /// The<b><c>inset</c></b> CSS property is a shorthand that corresponds to the <c>top</c>, <c>right</c>, <c>bottom</c>, and/or <c>left</c> properties. It has the same multi-value syntax of the <c>margin</c> shorthand.<br/><br/>
    ///<b>Syntax</b>: <c>'top'{1,4}</c>
    /// </summary>
    static member inline inset: ICssStyle = unbox "inset"
    /// <summary>
    /// The<b><c>inset-block</c></b> CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>top</c> and <c>bottom</c>, or <c>right</c> and <c>left</c> properties depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'top'{1,2}</c>
    /// </summary>
    static member inline insetBlock: ICssStyle = unbox "insetBlock"
    /// <summary>
    /// The<b><c>inset-inline</c></b> CSS property defines the logical start and end offsets of an element in the direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the <c>top</c> and <c>bottom</c>, or <c>right</c> and <c>left</c> properties depending on the values defined for <c>writing-mode</c>, <c>direction</c>, and <c>text-orientation</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'top'{1,2}</c>
    /// </summary>
    static member inline insetInline: ICssStyle = unbox "insetInline"
    /// </summary>
    static member inline lineClamp: ICssStyle = unbox "lineClamp"
    /// <summary>
    /// The<b><c>list-style</c></b> CSS shorthand property allows you to set all the list style properties at once.<br/><br/>
    ///<b>Syntax</b>: <c>'list-style-type' || 'list-style-position' || 'list-style-image'</c>
    /// </summary>
    static member inline listStyle: ICssStyle = unbox "listStyle"
    /// <summary>
    /// The<b><c>margin</c></b> CSS shorthand property sets the margin area on all four sides of an element.<br/><br/>
    ///<b>Syntax</b>: <c>[ length | percentage | auto ]{1,4}</c>
    /// </summary>
    static member inline margin: ICssStyle = unbox "margin"
    /// <summary>
    /// The<b><c>margin-block</c></b> CSS shorthand property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.<br/><br/>
    ///<b>Syntax</b>: <c>'margin-left'{1,2}</c>
    /// </summary>
    static member inline marginBlock: ICssStyle = unbox "marginBlock"
    /// <summary>
    /// The<b><c>margin-inline</c></b> CSS shorthand property is a shorthand property that defines both the logical start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.<br/><br/>
    ///<b>Syntax</b>: <c>'margin-left'{1,2}</c>
    /// </summary>
    static member inline marginInline: ICssStyle = unbox "marginInline"
    /// <summary>
    /// The<b><c>mask</c></b> CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.<br/><br/>
    ///<b>Syntax</b>: <c>mask-layer#</c>
    /// </summary>
    static member inline mask: ICssStyle = unbox "mask"
    /// <summary>
    /// The<b><c>mask-border</c></b> CSS shorthand property lets you create a mask along the edge of an element's border.<br/><br/>
    ///<b>Syntax</b>: <c>'mask-border-source' || 'mask-border-slice' [ / 'mask-border-width'? [ / 'mask-border-outset' ]? ]? || 'mask-border-repeat' || 'mask-border-mode'</c>
    /// </summary>
    static member inline maskBorder: ICssStyle = unbox "maskBorder"
    /// <summary>
    /// The<b><c>offset</c></b> CSS shorthand property sets all the properties required for animating an element along a defined path.<br/><br/>
    ///<b>Syntax</b>: <c>[ 'offset-position'? [ 'offset-path' [ 'offset-distance' || 'offset-rotate' ]? ]? ]! [ / 'offset-anchor' ]?</c>
    /// </summary>
    static member inline motion: ICssStyle = unbox "motion"
    /// <summary>
    /// The<b><c>offset</c></b> CSS shorthand property sets all the properties required for animating an element along a defined path.<br/><br/>
    ///<b>Syntax</b>: <c>[ 'offset-position'? [ 'offset-path' [ 'offset-distance' || 'offset-rotate' ]? ]? ]! [ / 'offset-anchor' ]?</c>
    /// </summary>
    static member inline offset: ICssStyle = unbox "offset"
    /// <summary>
    /// The<b><c>outline</c></b> CSS shorthand property sets most of the outline properties in a single declaration.<br/><br/>
    ///<b>Syntax</b>: <c>[ 'outline-color' || 'outline-style' || 'outline-width' ]</c>
    /// </summary>
    static member inline outline: ICssStyle = unbox "outline"
    /// <summary>
    /// The<b><c>overflow</c></b> CSS shorthand property sets the desired behavior for an element's overflow — i.e. when an element's content is too big to fit in its block formatting context — in both directions.<br/><br/>
    ///<b>Syntax</b>: <c>[ visible | hidden | clip | scroll | auto ]{1,2}</c>
    /// <br/><b>Initial value</b>: <c>visible</c>
    /// </summary>
    static member inline overflow: ICssStyle = unbox "overflow"
    /// <summary>
    /// The<b><c>overscroll-behavior</c></b> CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for <c>overscroll-behavior-x</c> and <c>overscroll-behavior-y</c>.<br/><br/>
    ///<b>Syntax</b>: <c>[ contain | none | auto ]{1,2}</c>
    /// <br/><b>Initial value</b>: <c>auto</c>
    /// </summary>
    static member inline overscrollBehavior: ICssStyle = unbox "overscrollBehavior"
    /// <summary>
    /// The<b><c>padding</c></b> CSS shorthand property sets the padding area on all four sides of an element at once.<br/><br/>
    ///<b>Syntax</b>: <c>[ length | percentage ]{1,4}</c>
    /// </summary>
    static member inline padding: ICssStyle = unbox "padding"
    /// <summary>
    /// The<b><c>padding-block</c></b> CSS shorthand property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.<br/><br/>
    ///<b>Syntax</b>: <c>'padding-left'{1,2}</c>
    /// </summary>
    static member inline paddingBlock: ICssStyle = unbox "paddingBlock"
    /// <summary>
    /// The<b><c>padding-inline</c></b> CSS shorthand property defines the logical start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.<br/><br/>
    ///<b>Syntax</b>: <c>'padding-left'{1,2}</c>
    /// </summary>
    static member inline paddingInline: ICssStyle = unbox "paddingInline"
    /// <summary>
    /// The<b><c>place-content</c></b> CSS shorthand property allows you to align content along both the block and directions at once (i.e. the <c>align-content</c> and <c>justify-content</c> properties) in a relevant layout system such as Grid or Flexbox.<br/><br/>
    ///<b>Syntax</b>: <c>'align-content' 'justify-content'?</c>
    /// </summary>
    static member inline placeContent: ICssStyle = unbox "placeContent"
    /// <summary>
    /// The CSS<b><c>place-items</c></b> shorthand property allows you to align items along both the block and directions at once (i.e. the <c>align-items</c> and <c>justify-items</c> properties) in a relevant layout system such as Grid or Flexbox. If the second value is not set, the first value is also used for it.<br/><br/>
    ///<b>Syntax</b>: <c>'align-items' 'justify-items'?</c>
    /// </summary>
    static member inline placeItems: ICssStyle = unbox "placeItems"
    /// <summary>
    /// The<b><c>place-self</c></b> CSS shorthand property allows you to align an individual item in both the block and directions at once (i.e. the <c>align-self</c> and <c>justify-self</c> properties) in a relevant layout system such as Grid or Flexbox. If the second value is not present, the first value is also used for it.<br/><br/>
    ///<b>Syntax</b>: <c>'align-self' 'justify-self'?</c>
    /// </summary>
    static member inline placeSelf: ICssStyle = unbox "placeSelf"
    /// <summary>
    /// The<b><c>scroll-margin</c></b> shorthand property sets all of the scroll margins of an element at once, assigning values much like the <c>margin</c> property does for margins of an element.<br/><br/>
    ///<b>Syntax</b>: <c>length{1,4}</c>
    /// </summary>
    static member inline scrollMargin: ICssStyle = unbox "scrollMargin"
    /// <summary>
    /// The <c>scroll-margin-block</c> shorthand property sets the scroll margins of an element in the block dimension.<br/><br/>
    ///<b>Syntax</b>: <c>length{1,2}</c>
    /// </summary>
    static member inline scrollMarginBlock: ICssStyle = unbox "scrollMarginBlock"
    /// <summary>
    /// The <c>scroll-margin-inline</c> shorthand property sets the scroll margins of an element in the dimension.<br/><br/>
    ///<b>Syntax</b>: <c>length{1,2}</c>
    /// </summary>
    static member inline scrollMarginInline: ICssStyle = unbox "scrollMarginInline"
    /// <summary>
    /// The<b><c>scroll-padding</c></b> shorthand property sets scroll padding on all sides of an element at once, much like the <c>padding</c> property does for padding on an element.<br/><br/>
    ///<b>Syntax</b>: <c>[ auto | length-percentage ]{1,4}</c>
    /// </summary>
    static member inline scrollPadding: ICssStyle = unbox "scrollPadding"
    /// <summary>
    /// The <c>scroll-padding-block</c> shorthand property sets the scroll padding of an element in the block dimension.<br/><br/>
    ///<b>Syntax</b>: <c>[ auto | length-percentage ]{1,2}</c>
    /// </summary>
    static member inline scrollPaddingBlock: ICssStyle = unbox "scrollPaddingBlock"
    /// <summary>
    /// The <c>scroll-padding-inline</c> shorthand property sets the scroll padding of an element in the dimension.<br/><br/>
    ///<b>Syntax</b>: <c>[ auto | length-percentage ]{1,2}</c>
    /// </summary>
    static member inline scrollPaddingInline: ICssStyle = unbox "scrollPaddingInline"
    /// <summary>
    /// The<b><c>scroll-margin</c></b> shorthand property sets all of the scroll margins of an element at once, assigning values much like the <c>margin</c> property does for margins of an element.<br/><br/>
    ///<b>Syntax</b>: <c>length{1,4}</c>
    /// </summary>
    static member inline scrollSnapMargin: ICssStyle = unbox "scrollSnapMargin"
    /// <summary>
    /// The<b><c>scroll-timeline</c></b> CSS shorthand property defines a name that can be used to identify the source element of a scroll timeline, along with the scrollbar axis that should provide the timeline.<br/><br/>
    ///<b>Syntax</b>: <c>[ 'scroll-timeline-name' 'scroll-timeline-axis'? ]#</c>
    /// </summary>
    static member inline scrollTimeline: ICssStyle = unbox "scrollTimeline"
    /// <summary>
    /// The<b><c>text-decoration</c></b> shorthand CSS property sets the appearance of decorative lines on text. It is a shorthand for <c>text-decoration-line</c>, <c>text-decoration-color</c>, <c>text-decoration-style</c>, and the newer <c>text-decoration-thickness</c> property.<br/><br/>
    ///<b>Syntax</b>: <c>'text-decoration-line' || 'text-decoration-style' || 'text-decoration-color' || 'text-decoration-thickness'</c>
    /// </summary>
    static member inline textDecoration: ICssStyle = unbox "textDecoration"
    /// <summary>
    /// The<b><c>text-emphasis</c></b> CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for <c>text-emphasis-style</c> and <c>text-emphasis-color</c>.<br/><br/>
    ///<b>Syntax</b>: <c>'text-emphasis-style' || 'text-emphasis-color'</c>
    /// </summary>
    static member inline textEmphasis: ICssStyle = unbox "textEmphasis"
    /// <summary>
    /// The<b><c>transition</c></b> CSS property is a shorthand property for <c>transition-property</c>, <c>transition-duration</c>, <c>transition-timing-function</c>, and <c>transition-delay</c>.<br/><br/>
    ///<b>Syntax</b>: <c>single-transition#</c>
    /// </summary>
    static member inline transition: ICssStyle = unbox "transition"
    /// <summary>
    /// The<b><c>view-timeline</c></b> CSS shorthand property is used to define a _named view progress timeline_, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). <c>view-timeline</c> is set on the subject.<br/><br/>
    ///<b>Syntax</b>: <c>[ 'view-timeline-name' 'view-timeline-axis'? ]#</c>
    /// </summary>
    static member inline viewTimeline: ICssStyle = unbox "viewTimeline"
    static member inline alignmentBaseline: ICssStyle = unbox "alignmentBaseline"
    static member inline baselineShift: ICssStyle = unbox "baselineShift"
    static member inline clip: ICssStyle = unbox "clip"
    static member inline clipRule: ICssStyle = unbox "clipRule"
    static member inline colorInterpolation: ICssStyle = unbox "colorInterpolation"
    static member inline colorRendering: ICssStyle = unbox "colorRendering"
    static member inline dominantBaseline: ICssStyle = unbox "dominantBaseline"
    static member inline fill: ICssStyle = unbox "fill"
    static member inline fillOpacity: ICssStyle = unbox "fillOpacity"
    static member inline fillRule: ICssStyle = unbox "fillRule"
    static member inline floodColor: ICssStyle = unbox "floodColor"
    static member inline floodOpacity: ICssStyle = unbox "floodOpacity"
    static member inline glyphOrientationVertical: ICssStyle = unbox "glyphOrientationVertical"
    static member inline lightingColor: ICssStyle = unbox "lightingColor"
    static member inline marker: ICssStyle = unbox "marker"
    static member inline markerEnd: ICssStyle = unbox "markerEnd"
    static member inline markerMid: ICssStyle = unbox "markerMid"
    static member inline markerStart: ICssStyle = unbox "markerStart"
    static member inline shapeRendering: ICssStyle = unbox "shapeRendering"
    static member inline stopColor: ICssStyle = unbox "stopColor"
    static member inline stopOpacity: ICssStyle = unbox "stopOpacity"
    static member inline stroke: ICssStyle = unbox "stroke"
    static member inline strokeDasharray: ICssStyle = unbox "strokeDasharray"
    static member inline strokeDashoffset: ICssStyle = unbox "strokeDashoffset"
    static member inline strokeLinecap: ICssStyle = unbox "strokeLinecap"
    static member inline strokeLinejoin: ICssStyle = unbox "strokeLinejoin"
    static member inline strokeMiterlimit: ICssStyle = unbox "strokeMiterlimit"
    static member inline strokeOpacity: ICssStyle = unbox "strokeOpacity"
    static member inline strokeWidth: ICssStyle = unbox "strokeWidth"
    static member inline textAnchor: ICssStyle = unbox "textAnchor"
    static member inline vectorEffect: ICssStyle = unbox "vectorEffect"
